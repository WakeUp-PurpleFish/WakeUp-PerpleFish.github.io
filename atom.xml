<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wake Up</title>
  
  <subtitle>这是一个在学习中的人的blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-03T02:15:14.781Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>紫鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个女孩</title>
    <link href="http://yoursite.com/all/story/%E4%B8%80%E4%B8%AA%E5%A5%B3%E5%AD%A9/"/>
    <id>http://yoursite.com/all/story/一个女孩/</id>
    <published>2019-08-03T01:44:12.000Z</published>
    <updated>2019-08-03T02:15:14.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个女孩从生到死亡"><a href="#一个女孩从生到死亡" class="headerlink" title="一个女孩从生到死亡"></a>一个女孩从生到死亡</h1><h2 id="一个女孩一岁到十岁"><a href="#一个女孩一岁到十岁" class="headerlink" title="一个女孩一岁到十岁"></a>一个女孩一岁到十岁</h2><h3 id="紫鱼"><a href="#紫鱼" class="headerlink" title="紫鱼"></a>紫鱼</h3><p>  一个男人在产房外坐立不安。他的手在口袋上摸来摸去，始终没有拿出那一盒烟。最后产房的门打开了。一个小孩的哭声从里面传出来。护士出来说母子平安。男人开心的冲到女人的病床前，像一个小孩子一样的兴奋。他轻轻的摸了一下那个虚弱的女人的头发，慢慢的走进的孩子旁边，虽然自己的父母都希望抱一个孙子但是看这个新生的小生命他觉的是男是女都无所谓了，他好像看到了自己的新生。  他紧贴着玻璃细细看着这个只有自己手掌大的孩子。窗帘的缝隙里透出了一丝丝新出生的光明，日出了，这一日是1998年5月12日。男人在心里牢牢的默念了这个日期因为他觉的这是他人生中最重要的一天了。</p><p>  随着时间的推移孩子和母亲都出院了。在这此期间都来了很多人。小女孩的外公外婆，爷爷奶奶都来看了一下这个孩子。就是奶奶虽有些不悦，但是没有表现出来。女人也没有都说话很复杂的眼神不知道往哪放。外公外婆很是疼爱这个外孙女。只有那个男人全身心的在这个小女孩上没有察觉到着里的气氛已经有些不对了。</p><p>给孩子起什么名字？虽然早就想了很多但是就是没有定下来。孩子的爷爷看拿手指轻轻的摸着孩子的脸说。这个孩子是日出生出的，就叫旸谷吧。“日出旸谷”（出自诗经）。男人听见自己的父亲发话了就连声附和好、好、好名字。</p><p>随着时间的推移家里虽然有吵架，但是孩子还是平平安安的度过一岁。断奶了。但是孩子所需的东西价钱很贵。男人每天加班挣钱。一天到晚很累，回来还要听妻子的抱怨这里那里。母亲想要个男孩的愿望。有时他都感觉自己快崩溃了，但是自己看见了孩子过去轻轻的亲吻一下旸谷的脸什么烦恼都没有了。看见旸谷对自己拍手笑，感觉自己做的一切都值得了。他刮了一下旸谷的鼻子自言自语说：“每天晚上你可没少折腾你老子我呀！”旸谷也不知道懂不懂，却笑的更欢快了。男人也不由的露出了笑脸。</p><p>两岁半了，旸谷开始准备学走路了。其他人家的孩子都有学走了学步车，男人想给她也买一个，他跑到超市里看着学步车的价位，他沉默了。他一次次看着旸谷学走路，一直跌到然后在傻笑的爬起来继续，好像就不会哭。旸谷每次与大地接触。男人心里就疼一下。他暗暗下定决心一定要给旸谷买一个学步车。两个月后男人买回了一个学步车，可是旸谷已经学会了走路不摔跤了。女人在屋子里骂男人浪费钱。但是男人看见旸谷坐在车里一脸兴奋的摔着手臂。嘿嘿的笑着。开心的要命。</p><p>四岁了旸谷去了公立幼儿园。身边好多孩子都去了很好的私立幼儿园。他看着孩子有时回来不是很高兴。他问孩子，但旸谷也什么都不说。他拖着疲惫的身体，也没有洗漱倒在了沙发就睡了。</p><p>七岁旸谷很争气考了一个好成绩，去了不错的公立小学。全家人位了旸谷考了好小学庆祝了一番。那天在饭店旸谷，吃的满嘴是油。</p><p>九岁了，男人看见小旸谷瘦了一圈，去问旸谷怎么回事。旸谷没有说，他偷偷问其他旸谷的同学，他感觉到旸谷受到了排挤。因为名字。小孩子们叫她“肠子”。旸谷终于有一天回来哭着说我要改名字。这个名字不好。他们叫我“肠子”，他们说我名字脏兮兮的。男人不知到该怎么说了。这时女人出来说。哪有名字随便乱来的。旸谷哭骂道：“那个傻子给我起的名字。“男人忽的一巴掌就扇一耳光。旸谷气的跑出了屋子。男人愣了一下追了上去。男人偷偷跟着旸谷。偷偷看着她，她不知道在干什么她瞎转着。男人一路上有些恍惚。他第一次打旸谷，他心里很疼，疼到快哭了。这些年来多苦他都没有掉一滴眼泪。他那次出差下巴被划破在没有麻醉的情况下缝了十七针。他还调侃这工伤给多加钱了哈。好给我女儿买一个大熊娃娃她可喜欢了。那时他想到她就一点都不疼。这次他眼睛红了。父亲给女儿起了旸谷这个名字。父亲在自己出差时，心脏病突发抢救无效没有了。他连自己父亲最后一面都没有见，他想到这里更加难受，他感觉自己快呼吸不上来了。他偷偷的跟着旸谷三个小时，最后旸谷总于饿的不行了回家了。他在家门口安安静静的抽了一支烟。摸了一把眼泪。又去超市带了旸谷最喜欢的零食回家了。</p><p>十岁旸谷长高了有一米四了。他看着旸谷有些恍惚了，怎么回事？她就长大了，张这么大，明明感觉她只有巴掌那么大，现在已经这么大了。旸谷不喜欢穿校服，就喜欢穿裙子。旸谷说穿裙子好看。男人笑了，女儿知道打扮了。一天旸谷回来就说爸爸，有个男孩怎么老是拽我辫子，老是招惹我烦死了。男人笑着说：“是不是那个男孩喜欢我们家的旸谷呀！“旸谷翻了个白眼说：”我才不稀罕呢，哼，他还说’要做我的英雄呢？恶心’”。男人看着旸谷神气的表情笑了。他想着旸谷的生日快到了，给她准备一个大大的蛋糕和一个毛茸茸的娃娃。他永远也猜不到黑暗就在不远的前方。5月12日男人上了一上午的班，就请假了。去买了蛋糕和娃娃。回家时旸谷就上学去了。他就在家里开始准备为旸谷庆祝十岁的生日。</p><p> 旸谷刚进入教室。那个小男孩就坐在她后面说以后我保护你。旸谷不屑的笑了笑说：“你比我还低算了吧。如果有人欺负你你可以叫我来帮你，前提是你叫我姐姐。”小男生耸耸小肩膀尴尬一笑。第一节课上了快有半个小时。所有的孩子都想着还有十分钟下课，该玩什么好呢？忽然整个房子都摇动了起来。班主任忽然推门而入大喊：“快快跑呀！“老师就一边喊跑上楼。所有孩子都开始跑。旸谷吓傻了。教室里一瞬间就没人了。只有旸谷趴在桌子下。忽然有人笨拙踢开桌子，拉着旸谷跑。旸谷也不知道发生了什么事。只跟着跑。快跑出了楼门口突然门口掉了一块玻璃碎成一片。旸谷吓的大喊。忽然旸谷感觉屁股有人踢了一脚。旸谷一个踉跄跑过了门口滚下楼梯。有男老师看见赶紧跑过来。拉着远离了教学楼。旸谷看见了看清了是那个男孩，是哪个说要保护她的男孩一路拉着她跑。她一边哭一边口齿不清的大喊里面还有人。没人理她。她也挣脱不开老师的拉扯。她离教学楼越来越远。然后看见教学楼轰然都下。灰尘有一米高。那年她的十岁。</p><hr><h2 id="一个女孩十一到二十岁"><a href="#一个女孩十一到二十岁" class="headerlink" title="一个女孩十一到二十岁"></a>一个女孩十一到二十岁</h2><h3 id="霏"><a href="#霏" class="headerlink" title="霏"></a>霏</h3><p>   应急救援队经过三天的搜救，救出了27名被埋没在废墟中的孩子，然而有7个小孩的生命永久地留在了这片废墟里，其中包括那个救了旸谷的小男孩。旸谷知道后，她哭了，哭的特别伤心，她有做过最坏的猜想，可当她真正听到这个消息的时候，心里还是不能接受，觉得死亡不该离她这么近的，这是旸谷第一次感受到除了亲人以外还有人愿意为了她牺牲自己。在后来的很长一段时间里，旸谷都没能走出这场意外带给她的阴影，她内疚自责，如果不是因为那场突如其来的地震，如果不是因为自己，或许那个小男孩现在还站在自己的跟前，对自己说“以后我保护你”。旸谷的父母不想让她再这么伤心下去，决定搬到R市居住，希望换个环境她能忘记伤心的回忆重新生活。</p><p>在父母的陪伴下，旸谷逐渐变得乐观起来，在新的学校里交了新的朋友，学习成绩也依旧很优秀，只是在每年生日那天她还是会想起教学楼倒塌的那一幕，想起那个救了她的小男孩。三年后，旸谷小学毕业，考进了附近的一所中学。那年暑假，旸谷和父母去了清城旅游，那是她第一次出远门，一路上都特别开心，她喜欢这里的野生动物园和海洋水族馆，对那些奇奇怪怪的生物充满了好奇，她也喜欢这里繁华的夜景和浩瀚的大海，令人流连忘返。</p><p>暑假过得很快，眨眼间就到了开学的日子，虽然是进入新的学习环境，但这对于本就乐观开朗的旸谷来说，并没有什么影响，她主动和其他同学打招呼，很快就熟悉了班里一大半的同学。因为成绩优异，旸谷被老师暂定为学习委员，当然，经过后面学习成绩的鉴定，这个学委一当便是三年。</p><p>苡晨是旸谷初中时期的好闺蜜，她俩第一次见面是在去清城旅行的火车上，当时她们的床位是挨着的，这俩小孩性格差不多，很是合拍，没过多久便玩儿到一块儿了，后来才知道她们考上了同一所初中，苡晨说，要是能分到一个班就更好了。结果开学第一天，旸谷惊喜的发现，她们还真的分到了同一个班，或许这就是缘分吧。初中三年，旸谷和苡晨形影不离，她们一起学习，一起吃饭，一起参加活动，一起逛街，总之有旸谷的地方总能见到苡晨，有苡晨的地方也少不了旸谷。她们会时常向对方倾诉自己的心事，当一个人被欺负时，另一个人总会霸气的护着对方。旸谷时常感慨自己很幸运，遇见了这么贴心的好朋友。</p><p>初中正是叛逆的时期，每个班总会出那么几个小混混，成天不好好学习，一言不合就是“放学别走，校门口见”，在旸谷的班级里也不意外。初二那年，有一次周五放学，旸谷拉着苡晨就往书店跑，因为她喜欢的一个歌手出新的专辑了，路上旸谷正歪着头和苡晨说事儿，不小心撞到了一个男生，当时男生手里拿着一个礼物，这一撞，礼物就掉在了地上，悲剧的是，礼物是玻璃做的，瞬间就碎了，那个男生脸顿时黑了，本就痞里痞气的他把旸谷吓到了，苡晨见势不对，赶紧拉着旸谷道歉，但是男生好像并不想就这么算了，甚至还恐吓她们以后小心点儿。这一幕恰巧被路过的泠然(此人正是旸谷班上的小混混之一，有一定的名气）撞见了，仔细一看一边是班上的同学，另一边是自己同道上的哥们，于是一身正气的泠然准备化解他们之间的矛盾，他走过去将哥们拉到一边，旸谷不知道他们说了些什么，等他们再次回来的时候那个男生只说了句“都是误会一场，以后走路看着点儿”，然后就潇洒的离开了。旸谷和苡晨非常感谢泠然，两人决定请他吃饭。其实在这之前，旸谷和泠然并不是很熟，虽然在同一个班里，但是他们就属于那种两个星球里的人，没什么共同语言，自然也就没什么交集了，所以这一次泠然能够帮她们，旸谷也感到很惊讶，不过更多的还是感激。之后旸谷专注于学习，与泠然也就没有过多的接触。</p><p>初三上学期的第一次月考后，班主任老师施行了一个“一带一”的学习计划，也就是一个优生带一个差生，因为是最后一年了，希望能通过这个方法来帮助大家学习。旸谷和泠然分到了一组，旸谷说：“这还真是有缘呢，以前你帮过我，那我也会尽力帮你的”。旸谷的优异成绩不是白来的，她有自己独特的学习方法，而且效率也很高，她将自己的秘籍分享给了泠然，同时根据泠然的学习情况为他制定了一套学习计划。从那之后，旸谷每天带着泠然学习，泠然似乎也不再像他以前那样做一个小混混，而是将心思放在了学习上，或许是升学压力所致吧。</p><p>紧凑的学习生活日复一日，泠然的成绩提高得很快，从年级的末尾跃进了年级前100，旸谷对泠然说：“不错嘛，继续加油就能出师了！”泠然笑着回道：“多谢师傅指点，徒儿定当竭尽全力，在‘战场上’杀他个片甲不留！”那表情和动作都跟电视剧里学的有模有样的，旸谷瞬间笑得直不起腰了。</p><p>中考前夕，班主任老师提出举办一次毕业座谈会，于是班委们开始精心筹备。座谈会定在了考前的最后一个周日晚上，那晚，大家都将桌子移向四周，围成了一个圈，中间空出的地方作为大家的舞台，班长还为大家准备了零食饮料。先是表演节目，接着以宿舍为单位发表感言，大家畅所欲言，有的同学说出了对朋友老师的美好祝愿，有的同学跟大家分享了和朋友之间的奇闻趣事，也有同学为曾经发生过的不愉快而道歉。那天晚上，大家有欢笑，有感动，有对未来的憧憬，也有对过去三年的不舍。最后，大家一起合唱了《那些年》，座谈会在歌声中渐渐迎来了尾声。那一晚的座谈会深深地留在了旸谷的记忆里，那是初中时期最难忘的回忆。</p><p>2014年6月14日，中考结束。旸谷、苡晨和泠然考进了同一所重点高中，只是被分在了不同的班级，旸谷和苡晨在尖子班，泠然在普通班。他们离学校都挺远的，所以从高一开始便住在了学校，这是旸谷第一次住校，她还挺期待宿舍生活的，每天去哪儿都会跟舍友一起，很快就熟络了起来，也渐渐和她们成为了好朋友。</p><p>高一进校第一周便是军训，大家统一穿上军训服，在校园里，无论走到哪儿，都是一道亮丽的风景线。全年级共24个班，苡晨在1班，泠然在10班，旸谷在24班。带领24班训练的是一位90后教官，与大家年龄相差五岁左右，他幽默风趣，经常逗得大家笑到肚子疼，他也很照顾同学们，别的班级都是顶着烈日训练，而他总会为他们班找一块阴凉地儿，同学们都很喜欢他，把他当哥哥一样看待。白天，大家站军姿、练步伐，晚上大家一起唱红歌、看电影，还会有比赛，虽然每天很累，但是大家都很开心。军训第五天，训练的项目是去靶场打靶，旸谷很是激动，因为去了靶场就能见识一下真正的枪了，而且，据说以往的学长学姐们军训都没有这个项目，旸谷再一次感到自己很幸运。到了目的地，每个人有五发子弹，旁边会有教练进行专业指导。旸谷为了纪念这次的靶场训练，把自己打出的子弹壳都收藏了起来。一周的军训时间过得很快，结束之际全班给教官买了礼物表示感谢。之后，旸谷新一阶段的学习生活便正式开始了。</p><p>高一下学期实行文理分班，所以从进校开始，泠然每天都在努力学习，希望自己能分到尖子班去。最后，1班定为文科尖子班，24班定位理科尖子班，苡晨和旸谷各选了文、理科，留在了原来的班级里，泠然选了理科，通过自己的努力考进了24班。旸谷和泠然初中时就很熟了，这次又分在了同一个班级，俩人都很开心，时常在一起讨论学习，也经常会在课间嬉笑打闹。</p><p>分班后，学校在4月份为高一年级组织了一次远足活动，大家都十分激动。为了方便管理，将全年级分为了两个部，1-12班为一级部，13-24为二级部，两个部去的地方也不同。远足的前一个周末，旸谷和苡晨去逛超市，买了好多好吃的，都是为远足准备的，只是都很遗憾不能去同一个地方，不过她俩已经约好回来后一起分享感受。远足那天早上，大家统一穿着校服，浩浩荡荡地出发了。一级部的路线大多是平坦的，二级部的路线则是全程爬山。旸谷和舍友们走在一起，一路上有说有笑，大家还会互相分享自己的零食。每个班时不时会喊喊口号、唱唱歌，整个山间回荡着大家的歌声和欢笑声。或许是学习久了，偶尔出来玩一趟，大家都感到很轻松，走在树林里，踏在青石上，越往高处走，还会有白茫茫的雾笼罩着山林，犹如仙境一般，路过之处，偶尔还会发现能吃的果子。旸谷班上的英语老师H也跟着他们班一起参加了这次活动，平日里大家都挺喜欢她的，因为她对待同学们特别和善，她的课堂也很有趣，工作中很负责，经常会为了批改同学们的作业而忘记吃饭，没课的时候都是在办公室里备课，或给同学们解惑，其他老师都称她为“拼命三郎”，这次远足，她还给大家带了自己在家做的肉和清明菜团子，大家也将自己的零食分享给H老师。走了大概三个小时才到了山顶，老师嘱咐大家注意安全，可以自由活动，但不能走太远。旸谷看泠然没带多少吃的，便将自己的零食分了一些给他。没过多久，天开始下小雨了，老师组织大家按班级顺序排好，准备下山。刚出山雨就下大了，有的同学带了伞，有的没带，好几个人挤在一把伞下奔回学校，泠然见旸谷没带伞，就将伞借给了她，自己淋着跑回了学校。旸谷呆呆的看着他的背影，心里暖暖的。大家赶回学校后，洗了热水澡，休息了一晚，第二天又开始日常的学习生活了。</p><p>2016年5月12日，是旸谷的18岁生日。这天早上，旸谷刚起床，就收到了舍友们的礼物和祝福，舍友A送了她一双高跟鞋，舍友E亲手画了一幅旸谷的偶像画送给她，好朋友苡晨还特地赶了个大早去旸谷宿舍送礼物。大家都知道，因为08年的那场地震，5月12日成了一个特殊的日子，他们很庆幸自己能躲过那场灾难，只有旸谷对每年的这一天还心有余悸，她不想让父母太过担心，从初中开始，便学会了用微笑掩饰自己。泠然是在初三那年，无意间知道了她的这个小秘密，所以从那以后，旸谷都会在生日这天收到来自泠然的惊喜，因为泠然觉得有了惊喜，或许她就不会去想那些惊吓了吧。旸谷这次的生日也不例外，依旧收到了很多惊喜。第二天就是周五，下午放学回家后，旸谷的父母为庆祝她成年，带她出去吃了一顿大餐，吃完后，旸谷的母亲拿出一个礼盒，说是给旸谷准备的生日礼物，旸谷打开一看，是她小时候最喜欢的哆啦A梦，那时候还小，在电视里面看到了哆啦A梦，就超级喜欢，想让母亲给她买一个玩偶，但是母亲觉得买那个浪费钱，就应该买点儿学习资料好好学习，旸谷哭闹着非要它不可，母亲就狠狠地打骂了她一顿，后来旸谷看见喜欢的玩具也没敢跟父母说，只是努力学习，成为了别人眼中的乖孩子。这一次，母亲说：“自小时候那件事过后，你就一直很听话，我想那时候可能对你太苛刻了，虽然你父亲时常护着你，宠着你，或许你心里对我还是有怨言的，今天送你这个是想还你一个童年，跟你说声对不起，还想告诉你，今后你就是一个成年人了，你要学着长大，学着承担责任，学着规划未来，但是在父母心里，你永远都是孩子，无论何时有了任何的磕磕绊绊，父母的臂弯永远都为你敞开着。”旸谷扑在母亲的怀里，开心地哭了。</p><p>2016年5月28日，H老师因病去世了。这段时间，H老师身体一直不好，还住了几次院，身体日渐消瘦，英语课都是其他老师带的，大家得知这个消息后，都非常伤心，周末都会抽时间去看看她，只是最后病魔还是将老师带离了这个世界。大家回想起与H老师相处的点点滴滴，都默默地流下了眼泪。旸谷还写了一首诗送给H老师，愿老师在另一个世界里永远健康快乐。追悼会那天，全班同学都去送H老师最后一程，大家在她的灵前宣誓，一定会考上好大学，成为H老师的骄傲。</p><p>高三，是被作业和考试填满的一年，有人说人生最具学识的时候是高三，上知天文下知地理，好像，也挺有道理。这一年，大家斗志昂扬，只为一个目标——考上理想的大学。旸谷每天的生活就是典型的“三点一线”，有时候晚上睡觉，梦里都是做题的情景。旸谷和舍友们也经常会在宿舍里聊天到深夜，大家一起聊着过往，聊着未来，或许是因为快毕业了，以后大家各奔东西，相聚在一起的时间就少了，便会有很多感慨和不舍吧。2017年5月，全班拍了毕业照，意味着每天穿梭的校园，就要到说再见的时候了。2017年6月6日，老师最后一次站在讲台上嘱咐着注意事项，给同学们加油鼓劲儿。2017年6月7、8日，人生的转折点，大家一起为自己的理想奋战。</p><p>考完后，班主任老师说志愿统一去学校填，填完全班一起聚一聚，算作是一场离别宴。6月24日下午，大家统一在学校机房填志愿，填完后相约去了酒店，那晚，大家为毕业感到开心，也为离别感到难过，互相说着祝福的话。旸谷从小到大没怎么喝过酒，也在那一天喝了好几杯，好在并没有喝醉。宴席结束后，泠然送旸谷回家，快到家的时候，泠然向旸谷表白了，说起了很多很多两人以前的故事，旸谷在平时与泠然的相处中对他也有好感，就同意了，于是，旸谷便开始了人生中的第一次恋爱。</p><p>2017年7月，旸谷收到了南昭大学船舶与海洋工程专业的录取通知书，苡晨被省内一所师范大学的汉语言文学专业录取，泠然被㫥一大学计算机系录取，三人幸运地都留在了省内的M市。旸谷同宿舍里的舍友A和B也被本省的其他学校录取了，舍友C选择了复读，剩下的都去了外省。</p><p>2017年9月，旸谷和泠然满怀期待坐上了开往M市的火车，看着车窗外倒退的田园山河，旸谷心中不禁感慨：12年的寒窗苦读，就为换来今天这一次旅途，所期待的大学生活，又会是怎样的呢！</p><p>旸谷来到南昭大学，被它的恢宏气势所震撼，被它的优美环境所吸引，瞬间爱上了这里。舍友们来自全国各地，大家相聚在南昭，是一场缘分。半个月的军训过后，正式开始上课，旸谷发现，大学的教学模式跟中学截然不同，不再有班主任每天盯着学习，教室里不再有固定的同桌，即使是同班同学，也很少见面，有时候甚至都不能将名字与人对号入座，也不再有堆积如山的课后作业，有的只是每天朝夕相处的舍友。旸谷觉得，上了大学好像就失去了好多，但也获得了更多的自由，她加入了社团、学生会，认识了很多学长学姐和一群有着共同爱好的朋友们，大家一起做着自己喜欢的事情，有时候因为举办活动太忙，都顾不上吃饭，但她依旧很开心。旸谷经常跟苡晨和高中舍友聊天，大家互相分享着各自的大学生活。</p><p>大学里的第一个国庆节，旸谷和泠然一起玩遍了整个M市，吃遍了M市所有的小吃，泠然还带着旸谷参观了㫥一大学，旸谷走在泠然每天都会走过的路上，听着泠然讲他的日常，仿佛他们每天都在一起一般。</p><p>转眼间，一学期过去了，寒假如期而至，旸谷回到R市，看着半年未见的父母，开心地抱着他们，随后拿出自己在M市买的礼物送给父母，母亲为旸谷做了一大桌好吃的，一家人幸福地吃着团圆饭。</p><p>放假后不久，旸谷高中班里的班长组织了一次同学聚会，还请了班主任和好几位任课老师。时隔半年，大家又聚在了一起，这次的聚会与半年前不同，似乎大家进了大学后都有了变化，变得更漂亮、更帅气、更成熟了。班主任老师说：“我时常关注着你们的QQ空间、微信朋友圈，大家的变化都看在眼里，恭喜你们实现了自己的大学梦，也祝你们未来前程似锦。”说完，大家响起了热烈的掌声。后来聊到了谈恋爱的话题，大家将焦点指向了旸谷和泠然，两人本是和各自的舍友坐在一桌，同学们一起哄，便将两人凑在了一桌，老师和同学们纷纷说着祝福的话。临别时，班长建议，以后若是可以，大家每年寒假都聚一聚，只是，这以后的事儿，谁又能说的准呢？</p><p>跨年夜里，旸谷找了个理由遛出家，同泠然、苡晨以及其他几个朋友一起放烟花，吃夜宵，大家一起等待零点的钟声敲响，许下了2018年的第一个愿望。旸谷的愿望很简单：希望父母、朋友身体健康，快快乐乐，和泠然永远好好的。</p><p>新的一学期，对旸谷来说，同上学期没有太大的差别，只是对校园更熟悉了，不会再像刚进学校那般分不清方向了。平日里上课，周末举办活动，偶尔和舍友们一起出去逛逛，再有空闲时间便会去㫥一大学找泠然。</p><p>三四月的南昭是最美的，因为学校里各种花都争相开放，许多未曾见过的花总是能让人看一眼就舍不得离开。旸谷拉着舍友拍了很多照片，恨不得将这满园春色都留下来。同高中的朋友们分享了学校的美景后，旸谷说，有机会一定也要去别的大学逛逛。</p><p>这一切看似平静又美好的日子在5月的某一天，突然变了。</p><p>5月26日下午，旸谷和舍友取完快递回来，看见了校园里的无偿献血车，旸谷便对舍友说：“咱们去献血吧，长这么大还没献过呢！”于是二人向工作人员了解了情况，第二天便去献血，旸谷完成了所有的准备工作，就在等着抽血时，医生告知她不适合献血，当时旸谷震惊了一下，心想：近期没感冒呀，身体也没有其他不适，怎么会不适合呢？但医生并没有做过多的解释。下午没人的时候，旸谷又和舍友去找那个医生问了问情况，医生说：“你的血液有问题，建议你去医院检查一下，有可能是乙肝。”旸谷谢过医生，回到宿舍便不知所措，舍友们建议去医院查清楚了再说。5月28日，旸谷去了医院，检查结果显示，她真的有乙肝，是大三阳，旸谷心慌了，医生问她，父母亲人是否有人有乙肝，然而，这些她并不知道，父母从未跟她说起过，她也从未觉得自己身上会发生这样的事，医生再次跟旸谷说：“你的检查结果显示，肝功能正常，现在也不需要治疗，只要注意不让别人接触你的血液，自己平时注意不要饮酒、熬夜，定期复查，就没什么大碍。”听完医生的嘱咐，旸谷出了医院后便给父母打电话，父母说他们并没有这个病，然后便安慰旸谷，让她多注意身体，别多想，会好起来的。</p><p>此时此刻，旸谷想怨，却不知道该怨谁，旸谷想哭，却强忍着不想流下眼泪，在20岁该有的青春里，旸谷只觉得眼前一片黑暗，她站在十字路口，任凭路灯由红变绿再变红，却不知该何去何从！</p><hr><h2 id="一个女孩二十一到三十岁"><a href="#一个女孩二十一到三十岁" class="headerlink" title="一个女孩二十一到三十岁"></a>一个女孩二十一到三十岁</h2><h3 id="紫鱼-1"><a href="#紫鱼-1" class="headerlink" title="紫鱼"></a>紫鱼</h3><p><strong>人物关系介绍或已出场的人物</strong>：</p><p>旸谷：女，这个故事的主人公1998年出生。</p><p>旸谷的父亲。旸过 嘻嘻</p><p>旸谷的母亲。Xxx</p><p>旸谷的祖父母</p><p>小学同班小男孩在大地震中牺牲了。</p><p>旸谷的小学老师，在地震中未知生死。</p><p>苡晨 是旸谷初中的好友</p><p>泠然 是初中同班同学有点想正义的二五仔，在后来很努力的学习</p><p>大一的一个军训教练。很开朗。</p><p>英语老师h 高中 很认真的对待事情和学生。后离开的人世。</p><p>A、B、C高中宿友打酱油 </p><p><strong><em>正文：</em></strong></p><p>  二十一岁，旸谷知道自己有乙肝虽然是慢性的但还是停学了一年。在家慢慢调理和治疗慢性乙肝，她听医生的建议：三分药治，七分调理；需有战胜病魔的信心及意志，精神愉快，生活规律，合理饮食，不宜过度营养引起肥胖；慢慢的调理中治好这个疾病。在此期间只要有假期苡晨和泠然常常来看望她。也有好多人来问她的病情。她总是以笑脸相应。并不想让自己的好友担心她的身体。旸谷的父亲常常看见自己的女儿常常失落的表情一个人。一时间却不知道怎么安慰自己的女儿。而自己的女儿到底在想什么，自己怎么帮助她。旸谷也常常心事重重的在自己的房间默默不语。</p><p>  二十二岁那年旸谷病终于康复可以去学校了。一时间自己有些不适应因为自己拉下很多课程这些课程都需要自己一一不回来。一时间旸谷觉得自己的压力很大。从开学两三个月中自己天天有课，忙的不可开交。有时吃饭都顾不上了。更别说自己和朋友出去玩。除了上正常的课还有补拉下的课。旸谷的宿舍状态基本上就是载头就睡，连洗漱的时间都没有了。她也能感觉到自己变得很邋遢了。但是这些事对她感觉疲劳来说真的事微不足道了。渐渐的不知为什么她和苡晨、泠然联系的也很少了。有时就是微信上快上课是快速的问候几句。渐渐的她们的身影在自己的视线中淡化了很多。这些对于现在的旸谷来说根本又没察觉到，她但现在一直担心下一门的考试或着下下一门的考试。</p><p>  二十三岁的这一年里旸谷。忙忙碌碌的半年年了，自己终于算是差不多补全了自己拉下的课程和所需的证书。在对于他来说的第四个学期末，又是自己生日要不是自己的父亲发来红包祝福自己生日快乐自己是真的忘了。她今天决定放羊一天了。她细细盘算着这一年她感觉很充实但也有一种莫名的空虚。她说不出来。她翻阅着自己的朋友圈，忽然发现自己闺蜜苡晨有了对象。那竟然是小一年前的事了，自己想来了苡晨提过这个男孩在她面前。但她没有想到她们尽然走在了一起。泠然呢？不知道泠然怎么样了。她莫名的想到了这个男孩。一时间觉的自己交的朋友挺少的一下子就是能想到这几个人。她看见宿舍有些空空荡荡的她发现自己的宿舍并不是很热闹的类型到是都是比较喜欢安安静静的。宿友应该去图书馆或者去外面玩了吧。她想到这里又想到泠然。不知道他现在干什么了。一想到和他关系很好，要是能成为她的女友也不错不到他是怎么想到。一想到这里旸谷感觉到自己脸在发烫。Emmm。怎么晚了怎么只有父母给我发祝福。他们呢？不知道他们在干什么？真想现在就见面聊聊天。算了学期快结束了，等回家后在和他们聚一聚吧。想到这里旸谷就去洗澡去了。</p><p>等她洗完发现自己手机好几个未接来电。她看见是泠然和苡晨打的。她赶紧回了电话，泠然很神秘的样子说。你下楼下来我在你的楼下。旸谷感觉莫名其妙但是是泠然也就没多想。穿了一套整洁的衣服小小的精心打扮了一番。她下宿舍楼看见泠然在快步走过来，拉着自己的走就往操场上走，虽然自己不知道泠然要去操场的方向干什么，但是他是泠然就随他跟着他走。到了操场上刚一转角就听见一声surprise，然后看见苡晨推着一个被烛光围绕的蛋糕而来，月光喝着烛光那一刻她被这个画面美呆了。他们一起唱着生日快乐歌。一下子旸谷激动的就哭了，他还想着这个生日就这样结束了。不过更让人诧异或者是惊喜吧。泠然随后就向旸谷表白了。旸谷很激动也很兴奋在旁的人的起哄下的一直点头。旸谷认为这是她大学中最美好的时光了吧。</p><p>二十四岁这是旸谷准备毕业季到来了。苡晨和泠然去年已经毕业了，自己还和他们一起拍照了。他们都早到工作了。苡晨回到的R市工作。因为她说她不想离家远了，就像在自己父母跟前找一个工作。将来也好照顾自己的父母，而现在就考研也很幸运他考上本校的研究生。泠然是一个喜欢闯荡的性格他早早就准备去外面找工作。这样旸谷和泠然已经有了半年的异地恋感情了。过年的那一段时间旸谷和泠然在一起跨年了。在半年未见的情感终于见面了。他们在过年期间尝到了爱情的果实。一想到泠然自己和他又有小半年没有见面了，拿起手机给泠然发了微信问他现在在干什么。泠然没有回可能又加班了吧实习生都是这么忙，旸谷跟自己这么说。自己还有几个月时间要毕业了。她也试着考研看是没有考上，她想着要补考公务员吧。或者做一个老师，但是做老师虽然自己有了教师资格证但是还有一段路要走才行。</p><p>终于迎来了毕业季。旸谷快激动的哭了，自己的论文不知道被打回来了几次，终于完成了并通过老师的问答了。在通过老师问答的时候自己激动差点哭出来。而最近她也受到了R市的offer，给出的工资也不错。剩下的就是拍照留念和聚餐。苡晨和泠然在她的毕业典礼上回来为她庆祝。那一天她很开心。苡晨那一天和她在一起睡，那一晚上她们聊了很多。苡晨和她对象分手了。原因是异地恋太心累了。自己坚持不下去了。况且虽然还再读书但是自己肯定不会离开R市的。对于她的对象也是不会理开他的家乡。所以为了以后的考虑就分手了，没有任何的纠结，因为苡晨说她虽然大大咧咧但是家里教育的还是比较保守没有太大的投入。也就放下了。旸谷听到这些不知道说什么好呀。自己想着自己的工作是在R市而泠然在更大的城市。怎么办，如果泠然在工作上不退让自己也想在父母身边这个两难的处境怎么办？而泠然也说了自己的父亲岗位调动全家已经搬家定居到其他市已经不在R市了。她一下迷茫了不知道该怎么办？她隐隐约约有种不好的预感。“旸谷、旸谷，你怎么了脸色怎么这么不好看”苡晨有些着急的问道。旸谷缓过神来说：“没事，没事！”说着又和苡晨打闹在一起了。第二天旸谷回家，苡晨回去学校了，泠然也回去工作了。旸谷回到家中。收拾了自己大学所有的东西。 她一边整理自己的东西一边回想着自己大学的五年的过去。喜悦和幸酸。越想越对未来更加迷茫了。</p><p>二十五岁她开始工作已经一年了，公司决定开始把旸谷转正。旸谷很开心，自己努力工作了终于得到了回报。这天她把这个好消息告诉了泠然。泠然一直没有回话。直到第二天才回话。旸谷有些生气。泠然解释到是自己忙于应酬喝的有些多了没有看到手机的信息。泠然在电话中尴尬的说等我忙完这一段时间一定回去给你庆祝。旸谷听到这里感觉忽然一下只开心了起来。有期待着与泠然的下一次的见面。</p><p>六月份是苡晨的毕业季，这一天旸谷来到苡晨的学校，一下感觉自己如果还在读书该多好呀。也不用每天都和领导打交道都小心翼翼的生怕出来什么差错。见到苡晨两个开心分享着这一段的事情。苡晨忽然问旸谷你和泠然真么样了？旸谷笑着说：“老样子吧！“苡晨思考一下问：”你打算怎么办？泠然一定会在定居的那个市，意思说你要放弃你这边的工作吗？去他的那个市这样离你父母就很远了。这样的事情你考虑过吗？你要放弃你这些年的东西远离这里去他的那个市吗？“旸谷一下只愣住了不知道该怎么办了。但旸谷还是和苡晨说：”走一步算一步，车道山前必有路。“苡晨尴尬的笑了一下。最后她们拍了学士服。重要的是她们一起吃了这个学习很多好吃的甜点。旸谷想着还是吃比其他的好玩，吃才是王道。</p><p>二十六这一年是真的快呀。又到了年末。准备新年的东西。父母又给旸谷旁敲侧击的想让旸谷找对象。旸谷心想我有对象不用你们担心。但是旸谷还是没有说出来，只是小跑过去抱着母亲的胳膊说：“我的好妈妈，我还年轻不着急，就不要管我了。”母亲把胳膊拽出来说：“都二十六的还年轻，再过几年都没人要了。我看xxx家的孩子就很好。要不你们见一见面看看怎么样？你觉得呢？”旸谷给父亲一个撒娇的眼神。父亲尴尬的说：“咱闺女怎么好看，怎么可能嫁不出，如果嫁不出我就养一辈子。”旸谷给父亲比了一个加油的手势。正月里旸谷和泠然如期见了面。在酒店里，旸谷有写尴尬的说我妈又让我相亲了。泠然一下只明白了什么意思。泠然站在窗子旁边点了一根烟。过了一会说：“要不你辞职了你这里的工作去。我工作的市吧。咱们两个人也好有个照应。我已经攒了一些钱让父母们贴补一些应该就可以负担起首付了。“旸谷说：”我父母就我一个孩子，我不想离家太远，而你父母又不在你现在工作的市里。那你可以回来工作吗？“泠然沉默了。屋子里的气氛开始很压抑。旸谷再次打破这种沉闷。在这个沉默里旸谷感觉自己都快要窒息了。旸谷说：“怎么样？旸谷感觉自己的要求也不过分，但是就是感觉自己没有底气。”。泠然吸完那支烟说道：“不要无理取闹！”旸谷一下只就傻眼了。“什么？我无理取闹？”旸谷一脸震惊的说着。因为这是她第一次听到泠然用这么冷的语气回话。我是想让他回来工作呀。即使成家也离父母这里不远呀。这又怎么成了无理取闹？旸谷想到苡晨以前和她对象分手的原因。她现在才感觉到这个纠结感。泠然说着：“我好不容易在那边打拼下一片天地，你就让我这么轻易放弃？你知道不知道这里面有多少我的汗水？真可笑你说让我放弃就放弃？”旸谷愤怒的回道：“就你那工作工资就比我高那么一些？你让我过去陪你喝西北风呀？在哪努力的有什么用，都成了白费功夫，浪费青春了！你看R市发展前景不错，你当时在R市发展说不定比你现在不知道好了多少倍能，我也是为咱们两个人考虑呀！“泠然先是一愣，然后喃喃自语”白费功夫。没用！”然后发疯了一样喊道：“好啊！那你找没有白费功夫的人呀！”说着摔门而去。只留下旸谷傻傻的做在床上不知道自己说错了什么？然后在震惊中缓过神来就哭了起来。</p><p>二十七对于两人的情况旸谷很迷茫，那次吵架过了两个月了，旸谷几次想打泠然的电话但最后都没有打出去，泠然也在醉酒中，白天工作晚上就喝酒。知道一天胃穿孔了，被送往了急救室。旸谷这一天正常上班苡晨忽然给电话，询问具体情况。杨哥这才知道赶快买飞机票去了那个城市到了医院旸谷就开始照顾泠然。看到泠然虚弱的样子旸谷一直哭，在泠然醒来以后摸着旸谷的头说没事不要哭了。哭化妆就不好看了。旸谷一撅嘴说：“我还没有来得及化妆”。随后旸谷决定辞去R市的工作来到泠然的身旁照顾泠然。在和泠然同居后的她终于开始学做饭了，每天等泠然回来一起尝自己做的饭。泠然也不知道自己哪来那么大的毅力吃下去，只是默默祈祷这食物没有毒。旸谷的父母知道旸谷去了那个城市跟着男朋友去了，母亲哭了很久，父亲也沉默了久久的说了一句：“女儿长大了，是该离家了。”</p><p>二十八岁泠然和旸谷求婚，后结婚，在婚礼上，旸谷父亲只说了一句：“如果你不喜欢了，请给我好端端的送回来。”在场的人都笑了，只有旸谷父亲看着女儿流泪不止，真的不忍心在多看一眼，他怕自己太舍不得了，想强留下自己的女儿。因为他不信任这个泠然。这个人身上散发着不是一个踏踏实实人的气息。要不是女儿非要嫁给泠然，他是第一个不同意这段感情。那天他不知道自己怎么回到酒店。他隐隐感觉到自己的孩子要受苦了。旸谷很开心，她觉得她是今天这个世界上最快乐的女孩了。随后他们出国度蜜月。拍了很多婚纱照。最满意的是她和泠然在巴黎铁塔下拍的。永世的承诺。万万没有想到这个承诺还是？</p><p>二十九岁那年旸谷怀孕了双胞胎。一家人很开心。苡晨常常来看望自己的未出生小侄女，旸谷常常看见苡晨都说一些体己话。两个人在卧室常常打闹说：“如果你不想要一个，可以我抱走一个”旸谷说回一句”自己生“苡晨回一句我怕疼。旸谷根本没有意识到有多疼但是她根本就在想下一次了。在12月12日在家里旸谷自己的羊水破了她的母亲刚快给泠然打电话，泠然第一时间就赶回来了。急急忙忙的送到医院，旸谷回忆到那一段疼痛自己真的不想在尝试了。打了麻药都不顶用，自己还是感觉很疼，疼到有时自己都快感觉自己快没有意识。那一瞬间她感觉自己死了算了。最后决定用刨妇产。还是无比的疼痛。最后终于生出来了是两个女孩。泠然父母有些不悦。收拾东西回家，给了旸谷一万。在就没有来照顾只给些钱顾了个保姆来照看。坐月子的她和刚出生的两个孩子。旸谷的母亲过来帮忙。那一段时间她感觉自己很恍恍惚惚觉得自己得了产后抑郁。</p><p>三十岁的那年自己的两个孩子早每天晚上就是会哭。这天晚上，旸谷被一阵急促的敲门声音惊醒，旸谷整个心脏不停的跳。平静不下来。自己走到门那里听到了泠然的声音。她打开门泠然一个身影就压了上来。一下吐了旸谷一身。自己身体几天乏的没洗衣服自己现在就这一件睡衣是干净的，泠然一直吐。她使用了全身的力气把泠然搬到厕所，她不知道为什么他那么重他身材都变形了，自己想尽一切方法扒了被泠然吐的不成样子的睡衣和泠然的衣服。自己一时间不知道该穿什么。这时一孩子在卧室里哭，自己就光着身子去喂孩子奶，这时另一个孩子也哭了。不停的闹，自己抱着这个孩子过去看另一个屁股下是湿的小孩尿床了。她抱着这个小孩抽走了被尿湿的床单。想到卫生间还有个喝的不省人事的泠然。一时间不知道怎么办。抱着两个孩子，在孩子的哭闹中和泠然呻吟中，自己再也忍不住，任由眼泪不住的流着。</p><p>———————————————————————————————————————</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一个女孩从生到死亡&quot;&gt;&lt;a href=&quot;#一个女孩从生到死亡&quot; class=&quot;headerlink&quot; title=&quot;一个女孩从生到死亡&quot;&gt;&lt;/a&gt;一个女孩从生到死亡&lt;/h1&gt;&lt;h2 id=&quot;一个女孩一岁到十岁&quot;&gt;&lt;a href=&quot;#一个女孩一岁到十岁&quot; class
      
    
    </summary>
    
    
      <category term="故事" scheme="http://yoursite.com/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>XML</title>
    <link href="http://yoursite.com/all/technology/XML/"/>
    <id>http://yoursite.com/all/technology/XML/</id>
    <published>2019-08-02T02:13:58.000Z</published>
    <updated>2019-08-02T06:11:23.625Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>  xml是指可扩展标记语言（eXtensible  Markup Language）它是一种标记语言，很类似HTML。它是一种标记语言，很类似HTML。它被设计的宗旨是传输数据而非显示数据。</p><p><strong><em>xml***</em></strong>技术可以解决的问题***</p><p>•XML语言出现的根本目的在于描述有关系的数据。如：省市。</p><p>•XML是一种通用的数据交换格式</p><p>•在XML语言中，它允许用户自定义标签。一个标签用于描述一个数据；一个标签可分为开始标签和结束标签，在起始标签之间，又可以使用其他标签描述其他数据，以此来实现数据关系的描述。</p><p>•XML中的数据必须通过软件程序来解析执行或者显示，如IE;这样的解析程序称之为Parser（解析器）</p><h3 id="xml文档的组成"><a href="#xml文档的组成" class="headerlink" title="xml文档的组成"></a>xml文档的组成</h3><h5 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h5><p>•在编写XML文档时，需要先使用文档声明来声明XML文档.且必须出现在文档的第一行</p><p>•最简单的语法：<?xml version="1.0"?></p><p>•用encoding属性说明文档所使用的字符编码，默认为UTF-8.保存在磁盘上的文件编码要与声明的编码一致。</p><p>•如：<?xml  version="1.0"  encoding="GB2312"?></p><p>•用standalone属性说明文档是否独立，即是否依赖其他文档。</p><p>•如：<?xml  version="1.0" standalone="yes"?></p><h5 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h5><p>•XML元素指XML文件中出现的标签。一个标签分为起始和结束标签不能省略。一个标签有如下几种书写形式：</p><p>–包含标签主体：<mytag>some content</mytag></p><p>–不含标签主体：<mytag></mytag></p><p>•一个标签中可以嵌套若干子标签，但所有标签必须合理的嵌套，不允许有交叉嵌套。</p><p>–<mytag1><mytag2></mytag2></mytag1>WRONG</p><p>•一个XML文档必须有且仅有一个根标签，其他标签都是这个根标签的子标签或者孙标签</p><p>•XML中不会忽略主体内容中出现的空格和换行。</p><p>•第一段    –&lt;中国&gt;&lt;北京&gt;&lt;海淀/&gt;&lt;/北京&gt;&lt;/中国&gt;  </p><p>•第二段   –&lt;中国&gt;\r\n\t&lt;北京&gt;&lt;海淀/&gt;&lt;/北京&gt;&lt;/中国&gt;</p><p><em>注</em>：由于在XML中，空格和换行都作为原始内容被处理，所以，在编写XML文件时，使用换行和缩进等方式来让原文件中的内容清晰可读的”良好”书写习惯可能要被迫改变</p><h5 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h5><p>•一个元素可以有多个属性，每个属性都有自己的名称和取值。例：&lt;mytag name=”value”…./&gt;</p><p>•属性值一定要用引号(单引号或双引号)引起来</p><p>•属性名称的命名规范与元素的命名规范相同</p><p>•元素中的属性是不允许重复的</p><p>•在XML技术中，标签属性所代表的信息也可以被改成用子元素的形式来描述，例如：</p><p>–<mytag></mytag></p><p>•<name></name></p><p>   –<firstname></firstname></p><p>   –<lastname></lastname></p><p><strong>•元素命名规范</strong></p><p>•元素（标签）的名称可以包含字母、数字、减号、下划线和英文句点，但必须遵守下面的一些规范：</p><p>–严格区分大小写</p><p>–只能以字母或者下划线开头</p><p>–不能以XML开头</p><p>–名称字符之间不能有空格或者制表符</p><p>–名称字符之间不能使用冒号</p><p>##### </p><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>•XML中的注释语法为：<!--这是注释--></p><p>•<em>注意</em>：</p><p>–xml声明之前不能有注释</p><p>–注释不能嵌套</p><h5 id="CDATA区"><a href="#CDATA区" class="headerlink" title="CDATA区"></a>CDATA区</h5><p>•CDATA是Character   Data的缩写</p><p>•作用：把标签当做普通文本内容</p><p>•语法：<!--[CDATA[内容]]--></p><!--[CDATA[  <itcom>这是一个文本非标签</itcom>  ]]--><h5 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h5><p>•对于一些特殊字符，若要在元素主体内容中显示，必须进行转义</p><p>特殊字符  代替符号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  &amp;             &amp;amp;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;              &amp;<span class="attr">lt</span>;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  \&gt;</span>            &amp;gt;</span><br><span class="line"></span><br><span class="line">  "              &amp;quot;</span><br><span class="line"></span><br><span class="line">  '              &amp;apos;  </span><br><span class="line">~</span><br></pre></td></tr></table></figure><h5 id="处理指令-PI-Processing-Instruction"><a href="#处理指令-PI-Processing-Instruction" class="headerlink" title="处理指令 (PI:Processing  Instruction)"></a>处理指令 (PI:Processing  Instruction)</h5><p>•处理指令简称PI</p><p>•作用：用来指挥软件如何解析XML文档</p><p>•语法：必须以”<?"作为开头，以"?>“作为结尾</p><p>•常用处理指令：</p><p>–XML声明：<?xml  version="1.0" encoding="GB2312"?></p><p>–xml-stylesheet指令：</p><p>•作用：指示xml文档所使用的css样式xsl。</p><p>•<strong>注</strong>：对中文命名的标签元素不起作用</p><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>  DTD（Document Type Definition）：文档类型定义。<br>  作用：约束XML的书写规范</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">文件清单：book.xml</span><br><span class="line">&lt;？xml version=<span class="string">"1.0"</span>？&gt;</span><br><span class="line">&lt;IDOCTYPE 书架SYSTEM<span class="string">"book.dtd"</span>&gt;</span><br><span class="line">&lt;书架〉</span><br><span class="line">&lt;书&gt;</span><br><span class="line">〈书名&gt;Java就业培训教程&lt;/书名〉</span><br><span class="line">&lt;作者〉张孝祥&lt;/作者〉</span><br><span class="line">〈售价〉39.00元&lt;/售价〉</span><br><span class="line">&lt;/书&gt;</span><br><span class="line">〈书&gt;</span><br><span class="line">〈书名&gt;JavaScript网页开发&lt;/书名〉</span><br><span class="line">&lt;作者〉张孝祥&lt;/作者〉</span><br><span class="line">&lt;售价&gt;28.00元&lt;/售价&gt;</span><br><span class="line">&lt;/书&gt;</span><br><span class="line">〈/书架〉</span><br><span class="line"></span><br><span class="line">文件清单：book.dtd</span><br><span class="line">&lt;！ELEMENT 书架（书+）〉</span><br><span class="line">〈！ELEMENT书（书名，作者，售价）〉</span><br><span class="line">〈！ELEMENT 书名（#PCDATA）〉&lt;！ELEMENT 作者（#PCDATA）〉</span><br><span class="line">〈！ELEMENT售价（#PCDATA）〉</span><br></pre></td></tr></table></figure><p>DTD语法细节</p><h5 id="定义元素"><a href="#定义元素" class="headerlink" title="定义元素"></a>定义元素</h5><p>•在DTD文档中使用ELEMENT关键字来声明一个XML元素。</p><p>•语法：<!ELEMENT  元素名称  使用规则></p><p><strong>使用规则</strong></p><p>•(#PCDATA):指示元素的主体内容只能是普通的文本</p><p>•EMPTY：用于指示元素的主体为空</p><p>•ANY：用于指示元素的主体内容为任意类型</p><p>•(子元素)：指示元素中包含的子元素</p><p>–定义子元素及描述他们的关系</p><p>•如果子元素是用逗号分开，说明必须按照声明顺序去编写XML文档</p><p>   例：&lt;!ELEMENT FILE (TITLE,AUTHOR,EMAIL)</p><p>•如果子元素用”|”分开，说明任选其一</p><p>  例：&lt;!ELEMENT FILE (TITLE|AUTHOR|EMAIL)</p><p>•用+、*、？来表示元素出现的次数</p><p> –  如果元素后面没有+*？表示必须且只能出现一次</p><p> –  +表示至少出现一次，一次或多次</p><p> –  *：表示可有可无，零次，一次或者多次</p><p> – ？：表示可以有，也可以无，有的话只能有一次，零次或一次</p><p>  如：&lt;!ELEMENT MYFILE((TITLE<em>,AUTHOR?,EMAIL)</em>|COMMENT)</p><h5 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h5><p><strong>属性一</strong>：</p><p>在DTD文档中使用ATTLIST关键字来为一个元素声明属性</p><p>语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ATTLIST</span> 元素名</span></span><br><span class="line"><span class="tag">属性名<span class="attr">1</span>  属性值类型  设置说明</span></span><br><span class="line"><span class="tag">属性名<span class="attr">2</span>  属性值类型  设置说明</span></span><br><span class="line"><span class="tag">……</span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="tag">&lt;<span class="name">!ATTLIST</span> 商品</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">   类别  <span class="attr">CDATA</span> #<span class="attr">REQUIRED</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">   颜色 <span class="attr">CDATA</span>#<span class="attr">IMPLIED</span>         &gt;</span></span><br><span class="line"></span><br><span class="line">对应的XML为：<span class="tag">&lt;<span class="name">商品</span> 类别 =<span class="string">“服装”</span> 颜色=<span class="string">“黄色”/</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性二</strong></p><p>•属性值类型：</p><p>–CDATA：表示属性的取值为普通的文本字符串</p><p>–ENUMERATED(DTD没有此关键字)：表示枚举，只能从枚举列表中任选其一，如：(鸡肉|猪肉|鱼肉|牛肉)</p><p>–ID：表示属性的取值不能重复</p><p>•设置说明：</p><p>– #REQUIRED：表示该属性必须出现</p><p>– #IMPLIED：表示该属性可有可无</p><p>– #FIXED：表示属性的取值为一个固定值。语法：#FIXED“固定值”</p><p>直接值：表示属性的取值为该默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">&lt;？xml version=&quot;1.0&quot;encoding=&quot;GB2312&quot;？&gt;</span><br><span class="line">&lt;！DOCTYPE 联系人列表[</span><br><span class="line">&lt;！ELEMENT 联系人列表ANY〉</span><br><span class="line">&lt;！ELEMENT 联系人（姓名，EMAIL）〉</span><br><span class="line">&lt;！ELEMENT 姓名（#PCDATA）〉</span><br><span class="line">&lt;！ELEMENT EMAIL（#PCDATA）&gt;</span><br><span class="line">&lt;！ATTLIST 联系人编号ID#REQUIRED〉</span><br><span class="line">    ]&gt;</span><br><span class="line">〈联系人列表》</span><br><span class="line">〈联系人编号=“a&quot;&gt;&lt;姓名〉张三&lt;/姓名》</span><br><span class="line">&lt;EMAIL&gt;zhang@it315.org&lt;/EMAIL〉</span><br><span class="line">&lt;/联系人〉</span><br><span class="line">&lt;联系人编号=“b&quot;〉&lt;姓名〉李四&lt;/姓名〉</span><br><span class="line">&lt;EMAIL&gt;1i@it315.org&lt;/EMAIL〉</span><br><span class="line">&lt;/联系人〉</span><br><span class="line">&lt;/联系人列表〉</span><br></pre></td></tr></table></figure><h5 id="定义实体"><a href="#定义实体" class="headerlink" title="定义实体"></a>定义实体</h5><p>•概念：在DTD中定义，在DTD中使用</p><p>•语法：<!ENTITY %实体名称 "实体内容"></p><p>•引用方式(注意是在DTD中使用):%实体名称；</p><p> <em>例：</em></p><p>•DTD中定义：</p>  <!ELEMENT % TAG_NAMES "姓名|EMAIL|电 话|地址"><p>•DTD中引用:</p>  <!ELEMENT 个人信息(%TAG_NAMES;|生日)> <!ELEMENT 客户信息(%TAG_NAMES;|公司名)><h3 id="java解析XML概述"><a href="#java解析XML概述" class="headerlink" title="java解析XML概述"></a>java解析XML概述</h3><p>•XML解析方式分为两种：DOM方式和SAX方式</p><p>–DOM：Document  Object  Model,文档对象模型。这种方式是w3c推荐的处理XML的一种方式</p><p>–SAX：Simple API for XML 。这种方式不是官方标准，属于开源社区</p><p>•XML解析开发包</p><p>–JAXP：是SUN公司推出的解析标准实现。</p><p>–Dom4J：是开源组织推出的解析开发包。</p><p>–JDom：是开源组织推出的解析开发包</p><h6 id="JAXP"><a href="#JAXP" class="headerlink" title="JAXP"></a>JAXP</h6><p>JAXP：（Java API for XML Processing）开发包是javaSE的一部分，它由以下几个包及其子包组成:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">–org.w3c.dom:提供DOM方式解析XML的标准接口</span><br><span class="line"></span><br><span class="line">–org.xml.sax:提供SAX方式解析XML的标注接口</span><br><span class="line"></span><br><span class="line">–javax.xml:提供了解析XML文档的类</span><br></pre></td></tr></table></figure><p>•javax.xml.parsers包中,定义了几个工厂类.我们可以通过调用这些工厂类，得到对XML文档进行解析的DOM和SAX解析器对象。</p><p> –DocumentBuilderFactory</p><p> –SAXParserFactory</p><h6 id="使用JAXP进行DOM解析"><a href="#使用JAXP进行DOM解析" class="headerlink" title="使用JAXP进行DOM解析"></a>使用JAXP进行DOM解析</h6><p>  javax.xml.parsers包中的DocumentBuilderFactory用于创建DOM模式的解析器对象，DocumentBuilderFactory是一个抽象工厂类，它不能直接实例化，但该类提供了一个newInstance方法，这个方法会根据本地平台默认安装的解析器，自动创建一个工厂的对象并返回。</p><h6 id="获得JAXP中的DOM解析器"><a href="#获得JAXP中的DOM解析器" class="headerlink" title="获得JAXP中的DOM解析器"></a>获得JAXP中的DOM解析器</h6><p>•调用DocumentBuilderFactory.newInstance（）方法得到创建DOM解析器的工厂。</p><p>•调用工厂对像的newDocumentBuilder方法得到DOM解析器对象</p><p>•调用DOM解析器对象的parse()方法解析XML文档，得到代表整个文档的Document对象，进行可以利用DOM特性对整个XML文档进行操作 </p><h6 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h6><p>DOM4j中，获得Document对象的方式有三种：    </p><p>1、读取XML文件，获得document对象</p><p>– SAXReader  reader =new   SAXReader();</p><p>– Document  document = reader.read(new File(“input.xml”));</p><p>2、解析XML形式的文本，得到document对象</p><p>– String  text  =”<members></members>“</p><p>– Document  document=DocumentHelper.parseText(text);</p><p>3、主动创建document对象</p><p>– Document document  =DocumentHelper.createDocument();</p><p>– //创建根节点</p><p>– Element root  = document.addElement(“members”);        </p><h6 id="节点对象（nade）"><a href="#节点对象（nade）" class="headerlink" title="节点对象（nade）"></a>节点对象（nade）</h6><p>1、获取文档的根节点</p><p>–Element root =document.getRootElement();–</p><p>2、取得某个节点的子节点</p><p>–Element element = node.element(“书名”);</p><p>3、取得节点的文字</p><p>–String text =node.getText();</p><p>4、取得某节点下所有名为”member”的子节点，并进行遍历。</p><p>–List nodes =rootElm.elements(“member”);</p><p>–for(Iterator it=nodes.iterator();it.hasNext();){</p><p>Element elm =(Element)it.next();    }</p><p>5、对某节点下的所有子节点进行遍历</p><p>–for(Iterator it = root.elementIterator();it.hasNext();){</p><p>lement element =(Element)it.next();   }</p><p>6、在某节点下添加子节点</p><p>–Element ageElm = newMemberElm.addElement(“age”);</p><p>7、设置节点文字</p><p>–element.setText(“29”);</p><p>8、删除某节点</p><p>//childElm是待删除的节点，parentElm是其父节点</p><p>–parentElm.remove(childElm);</p><p>9、添加一个CDATA节点</p><p>–Element contentElm = infoElm.addElement(“content”);</p><p>–contentElm.addCDATA(diary.getContent());</p><h6 id="节点对象属性"><a href="#节点对象属性" class="headerlink" title="节点对象属性"></a>节点对象属性</h6><p>1、取得某节点下的某属性</p><p>–Element root = document.getRootElement();</p><p>–Attribute attribute = root.attribute(“size”);</p><p>2、取得属性的文字</p><p>–String text = attribute.getText();</p><p>3、删除某属性</p><p>–Attribute attribute = root.attribute(“size”);</p><p>-root.remove(attribute);</p><p>4、遍历某节点的所有属性</p><p>–Element root = document.getRootElement();</p><p>–for(Iterator it=root.attributeIterator();it.hasNext();){</p><p>Attribute attribute =(Attribute)it.next();</p><p>String text =attribute.getText();</p><p>System.out.println(Text);     }</p><p>5、设置某节点的属性和文字</p><p>–newMemberElm.addAttribute(“name”,”sitinspring”);</p><p>6、设置属性的文字</p><p>–Attribute attribute = root.attribute(“name”);</p><p>–attribute.setText(“sitinspring”);</p><h3 id="XML-Schema"><a href="#XML-Schema" class="headerlink" title="XML Schema"></a>XML Schema</h3><p>•XML Schema也是一种用于定义和描述XML文档结构与内容的模式语言，其出现时为了克服DTD的局限性</p><p><em>XML Schema VS DTD</em>:</p><p>1、XML Schema符合XML语法结构</p><p>2、DOM、SAX等XML API很容易解析出XML Schema文档中的内容</p><p>3、XML Schema对名称空间支持的非常好</p><p>4、XML Schema比XML DTD支持更多的数据类型，并支持用户自定义新的数据类型</p><p>5、XML Schema定义约束能力非常强大，可以对XML实例文档做出细致的语义限制</p><p>6、XML Schema 不能像DTD一样定义实体，比DTD更复杂，但Xml Schema现在已是w3c组织的标准，它正逐步取代DTD</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">book.xsd文件</span><br><span class="line"><span class="meta">&lt;?xml version="1.0"encoding="UTF-8"？&gt;</span></span><br><span class="line"><span class="meta">&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"</span></span><br><span class="line"><span class="meta">    //标准的名称空间</span></span><br><span class="line"><span class="meta">    targetNamespace="http://www.itcast.cn"</span></span><br><span class="line"><span class="meta">    //将该schema文档绑定到http:/www.itcast.cn名称空间</span></span><br><span class="line"><span class="meta">    elementFormDefault="qualified"&gt;</span></span><br><span class="line"><span class="meta">&lt;xs:element name='书架’〉</span></span><br><span class="line"><span class="meta">〈xs:complexType&gt;</span></span><br><span class="line"><span class="meta">&lt;xs:sequence maxOccurs='unbounded'〉</span></span><br><span class="line"><span class="meta">&lt;xs:element name='书’〉</span></span><br><span class="line"><span class="meta">〈xs:complexType〉</span></span><br><span class="line"><span class="meta">&lt;xs:sequence&gt;</span></span><br><span class="line"><span class="meta">&lt;xs:element name='书名’type='xs:string'/&gt;&lt;xs:element name='作者’type='xs:string'/〉〈xs:element name='售价’type='xs:string'/&gt;</span></span><br><span class="line"><span class="meta">〈/xs:sequence〉</span></span><br><span class="line"><span class="meta">〈/xs:complexType&gt;</span></span><br><span class="line"><span class="meta">&lt;/xs:element〉</span></span><br><span class="line"><span class="meta">&lt;/xs:sequence&gt;</span></span><br><span class="line"><span class="meta">&lt;/xs:complexType〉</span></span><br><span class="line"><span class="meta">&lt;/xs:element〉</span></span><br><span class="line"><span class="meta">&lt;/xs:schema&gt;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&lt;Qxml version="1.0"encoding-"UTF-8"？&gt;</span></span><br><span class="line"><span class="meta">&lt;itcast：书架xmlns:itcast="http://www.itcast.cn"</span></span><br><span class="line"><span class="meta">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="meta">xsi:schemalocation=“http://www.itcast.cn book.xsd"&gt;</span></span><br><span class="line"><span class="meta">&lt;itcast：书&gt;</span></span><br><span class="line"><span class="meta">&lt;itcast：书名）JavaScript网页开发&lt;/itcast：书名）</span></span><br><span class="line"><span class="meta">&lt;itcast：作者〉张孝祥&lt;/itcast：作者》</span></span><br><span class="line"><span class="meta">〈itcast：售价〉28.00元&lt;/itcast：售价〉</span></span><br><span class="line"><span class="meta">&lt;/itcast：书&gt;</span></span><br><span class="line"><span class="meta">〈/itcast：书架〉</span></span><br></pre></td></tr></table></figure><h6 id="名称空间的概念"><a href="#名称空间的概念" class="headerlink" title="名称空间的概念"></a>名称空间的概念</h6><p>  在XML Schema中，每个约束模式文档都可以被赋予一个唯一的名称空间，名称空间用一个唯一的URI来表示。在Xml文件中书写标签时，可以通过名称空间声明，来声明当前编写的标签来自哪个Schema约束文档。</p><p>例：</p><p>&lt;comhh :书架  xmlns:comhh=”http://……”&gt;</p><p><a href="itcast:书" target="_blank" rel="noopener">itcast:书</a>……&lt;/itcast:书&gt;</p><p>&lt;/comhh:书架&gt;</p><p>此处用comhh来指向声明的名称，以便于后面对名称空间的引用</p><p><strong>注意</strong>：名称空间的 名字语法容易让人混淆，尽管以http://开始，哪个URL:根本没有指向任何文件，只是一个分配的名字</p><h6 id="使用名称空间引入Schema"><a href="#使用名称空间引入Schema" class="headerlink" title="使用名称空间引入Schema"></a>使用名称空间引入Schema</h6><p>为了在一个XML文档中声明它所遵循的Schema文件的具体位置，通常需要在Xml文档中的根节点中使用schemaLocation属性来指定，例如：</p><p>•&lt;comhh:书架 xmlns:comhh=”http://……”–xmlns:xsi=”http:……”   xsi：schemaLocation=”…….xsd”&gt;</p><p>schemaLocation此属性有两个值。第一个值是需要使用的命名空间。第二个值是供命名空间使用的XML  Schema的位置，两者之间用空格分隔。</p><p><strong>注意</strong>，在使用schemaLocation属性时，也需要指定该属性来自哪里</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">使用名称空间引入多个XML Schema文档</span><br><span class="line"><span class="tag">&lt;<span class="name">？xml</span> <span class="attr">version</span>=<span class="string">"1.0"</span><span class="attr">encoding</span>=<span class="string">"UTF-8"</span>？&gt;</span></span><br><span class="line">〈书架xmlns="http://www.it315.org/xmlbook/schema"</span><br><span class="line">xmlns:demo="http://www.it315.org/demo/schema"</span><br><span class="line">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">xsi:schemalocation="http://www.it315.org/xmlbook/schema http://www.it315.org/xmlbook.xsdhttp://www.it315.org/demo/schema http://www.it315.org/demo.xsd"&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">〈书名&gt;JavaScript网页开发<span class="tag">&lt;/<span class="name">书名〉</span></span></span><br><span class="line">&lt;作者〉张孝祥&lt;/作者〉</span><br><span class="line"><span class="tag">&lt;<span class="name">售价demo：币种=”人民币”</span>&gt;</span>28.00元<span class="tag">&lt;/<span class="name">售价〉</span></span></span><br><span class="line">&lt;/书&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">书架〉</span></span></span><br><span class="line"><span class="tag">    </span></span><br><span class="line"><span class="tag">不使用名称空间引入<span class="attr">XML</span> <span class="attr">Schema</span>文档 </span></span><br><span class="line">    &lt;？xml version="1.0"encoding="UTF-8"？&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">书架xmlns:xsi="http:</span>//<span class="attr">www.w3.org</span>/<span class="attr">2001</span>/<span class="attr">XMLSchema-instance</span>"</span></span><br><span class="line"><span class="tag"><span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"xmlbook.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">书名</span>&gt;</span>JavaScript网页开发<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">作者</span>&gt;</span>张孝祥<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">售价</span>&gt;</span>28.00元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">书架</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XML&quot;&gt;&lt;a href=&quot;#XML&quot; class=&quot;headerlink&quot; title=&quot;XML&quot;&gt;&lt;/a&gt;XML&lt;/h3&gt;&lt;p&gt;  xml是指可扩展标记语言（eXtensible  Markup Language）它是一种标记语言，很类似HTML。它是一种标记
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Stream流</title>
    <link href="http://yoursite.com/all/technology/Stream%E6%B5%81/"/>
    <id>http://yoursite.com/all/technology/Stream流/</id>
    <published>2019-08-01T06:50:32.000Z</published>
    <updated>2019-08-01T14:10:58.146Z</updated>
    
    <content type="html"><![CDATA[<p>Stream流</p><p>   示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamFilter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">list.add(<span class="string">"周芷若"</span>);</span><br><span class="line">list.add(<span class="string">"赵敏"</span>);</span><br><span class="line">list.add(<span class="string">"张强"</span>);</span><br><span class="line">list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">list.stream().filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>))</span><br><span class="line">.filter(s ‐&gt; s.length() == <span class="number">3</span>)</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据Collection获取流"><a href="#根据Collection获取流" class="headerlink" title="根据Collection获取流"></a>根据Collection获取流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetStream</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Stream&lt;String&gt; stream2 = set.stream();</span><br><span class="line">Vector&lt;String&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Stream&lt;String&gt; stream3 = vector.stream();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据Map获取流"><a href="#根据Map获取流" class="headerlink" title="根据Map获取流"></a>根据Map获取流</h4><p>  java.util.Map 接口不是 Collection 的子接口，且其K-V数据结构不符合流元素的单一特征，所以获取对应的流需要分key、value或entry等情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetStream</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Stream&lt;String&gt; keyStream = map.keySet().stream();</span><br><span class="line">Stream&lt;String&gt; valueStream = map.values().stream();</span><br><span class="line">Stream&lt;Map.Entry&lt;String, String&gt;&gt; entryStream = map.entrySet().stream();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据数组获取流"><a href="#根据数组获取流" class="headerlink" title="根据数组获取流"></a>根据数组获取流</h4><p>  如果使用的不是集合或映射而是数组，由于数组对象不可能添加默认方法，所以 Stream 接口中提供了静态方法of </p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetStream</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] array = &#123; <span class="string">"张无忌"</span>, <span class="string">"张翠山"</span>, <span class="string">"张三丰"</span>, <span class="string">"张一元"</span> &#125;;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(array);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>  <em>终结方法</em>：返回值类型不再是 Stream 接口自身类型的方法，因此不再支持类似 StringBuilder 那样的链式调用。本小节中，终结方法包括 count 和 forEach 方法。<br>  <em>非终结方法</em>：返回值类型仍然是 Stream 接口自身类型的方法，因此支持链式调用。（除了终结方法外，其余方法均为非终结方法。）</p><p><strong>过滤：filter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span>;</span><br><span class="line"><span class="comment">//该接口接收一个 Predicate 函数式接口参数（可以是一个Lambda或方法引用）作为筛选条件。</span></span><br></pre></td></tr></table></figure><p>Stream流中的filter方法基本使用的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07StreamFilter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">Stream&lt;String&gt; result = original.filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>));</span><br><span class="line">   <span class="comment">//在这里通过Lambda表达式来指定了筛选的条件：必须姓张。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="统计个数：count"><a href="#统计个数：count" class="headerlink" title="统计个数：count"></a>统计个数：count</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//该方法返回一个long值代表元素个数（不再像旧集合那样是int值）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基本使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09StreamCount</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">Stream&lt;String&gt; result = original.filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>));</span><br><span class="line">System.out.println(result.count()); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="取用前几个：limit"><a href="#取用前几个：limit" class="headerlink" title="取用前几个：limit"></a>取用前几个：limit</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">limit</span><span class="params">(<span class="keyword">long</span> maxSize)</span></span>;</span><br><span class="line"><span class="comment">//limit 方法可以对流进行截取，只取用前n个。</span></span><br><span class="line"><span class="comment">//参数是一个long型，如果集合当前长度大于参数则进行截取；否则不进行操作</span></span><br><span class="line"></span><br><span class="line">基本使用</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10StreamLimit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">Stream&lt;String&gt; result = original.limit(<span class="number">2</span>);</span><br><span class="line">System.out.println(result.count()); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="跳过前几个：skip"><a href="#跳过前几个：skip" class="headerlink" title="跳过前几个：skip"></a>跳过前几个：skip</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span></span>;</span><br><span class="line"><span class="comment">//使用获取一个截取之后的新流</span></span><br><span class="line"><span class="comment">//如果流的当前长度大于n，则跳过前n个；否则将会得到一个长度为0的空流。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基本使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11StreamSkip</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">Stream&lt;String&gt; result = original.skip(<span class="number">2</span>);</span><br><span class="line">System.out.println(result.count()); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="映射：map"><a href="#映射：map" class="headerlink" title="映射：map"></a>映射：map</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span></span>;</span><br><span class="line"><span class="comment">//该接口需要一个 Function 函数式接口参数，可以将当前流中的T类型数据转换为另一种R类型的流。</span></span><br></pre></td></tr></table></figure><h6 id="组合：concat"><a href="#组合：concat" class="headerlink" title="组合：concat"></a>组合：concat</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Stream&lt;T&gt; <span class="title">concat</span><span class="params">(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="comment">//基本使用方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class Demo12StreamConcat </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; streamA = Stream.of(<span class="string">"张无忌"</span>);</span><br><span class="line">Stream&lt;String&gt; streamB = Stream.of(<span class="string">"张翠山"</span>);</span><br><span class="line">Stream&lt;String&gt; result = Stream.concat(streamA, streamB);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="逐一处理：forEach"><a href="#逐一处理：forEach" class="headerlink" title="逐一处理：forEach"></a>逐一处理：forEach</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br><span class="line"><span class="comment">//该方法接收一个 Consumer 接口函数，会将每一个流元素交给该函数进行处理。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo12StreamForEach</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="联系：Stream方式集合元素处理"><a href="#联系：Stream方式集合元素处理" class="headerlink" title="联系：Stream方式集合元素处理"></a>联系：Stream方式集合元素处理</h6><p>题目：将上一题当中的传统for循环写法更换为Stream流式处理方式。两个集合的初始内容不变， Person 类的定义也不变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoStreamNames</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">List&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 第一个队伍只要名字为3个字的成员姓名；</span></span><br><span class="line"><span class="comment">// 第一个队伍筛选之后只要前3个人；</span></span><br><span class="line">Stream&lt;String&gt; streamOne = one.stream().filter(s ‐&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 第二个队伍只要姓张的成员姓名；</span></span><br><span class="line"><span class="comment">// 第二个队伍筛选之后不要前2个人；</span></span><br><span class="line">Stream&lt;String&gt; streamTwo = two.stream().filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>)).skip(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 将两个队伍合并为一个队伍；</span></span><br><span class="line"><span class="comment">// 根据姓名创建Person对象；</span></span><br><span class="line"><span class="comment">// 打印整个队伍的Person对象信息。</span></span><br><span class="line">Stream.concat(streamOne, streamTwo).map(Person::<span class="keyword">new</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="收集Stream结果"><a href="#收集Stream结果" class="headerlink" title="收集Stream结果"></a>收集Stream结果</h3><p>  Stream流提供 collect 方法，其参数需要一个 java.util.stream.Collector&lt;T,A, R&gt; 接口对象来指定收集到哪种  集合中。java.util.stream.Collectors 类提供一些方法，可以作为 Collector 接口的实例：<br>public static <t> Collector&lt;T, ?, List<t>&gt; toList() ：转换为 List 集合。<br>public static <t> Collector&lt;T, ?, Set<t>&gt; toSet() ：转换为 Set 集合。</t></t></t></t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo15StreamCollect</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"10"</span>, <span class="string">"20"</span>, <span class="string">"30"</span>, <span class="string">"40"</span>, <span class="string">"50"</span>);</span><br><span class="line">List&lt;String&gt; list = stream.collect(Collectors.toList());</span><br><span class="line">Set&lt;String&gt; set = stream.collect(Collectors.toSet());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="收集到数组中"><a href="#收集到数组中" class="headerlink" title="收集到数组中"></a>收集到数组中</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Object[] toArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用如下：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo16StreamArray</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"10"</span>, <span class="string">"20"</span>, <span class="string">"30"</span>, <span class="string">"40"</span>, <span class="string">"50"</span>);</span><br><span class="line">Object[] objArray = stream.toArray();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="解决泛型数组问题"><a href="#解决泛型数组问题" class="headerlink" title="解决泛型数组问题"></a><strong><em>解决泛型数组问题</em></strong></h6><p>有了Lambda和方法引用之后，可以使用 toArray 方法的另一种重载形式传递一个 IntFunction&lt;A[]&gt; 的函数，继而从外面指定泛型参数。方法签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator);</span><br><span class="line"></span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo17StreamArray</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"10"</span>, <span class="string">"20"</span>, <span class="string">"30"</span>, <span class="string">"40"</span>, <span class="string">"50"</span>);</span><br><span class="line">String[] strArray = stream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  既然数组也是有构造器的，那么传递一个数组的构造器引用即可。</p><h6 id="练习：将数组元素加到集合中"><a href="#练习：将数组元素加到集合中" class="headerlink" title="练习：将数组元素加到集合中"></a>练习：将数组元素加到集合中</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">请通过Stream流的方式，将下面数组当中的元素添加（收集）到 List 集合当中：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoCollect</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] array = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">首先需要将数组转换成为流，然后再通过 collect 方法收集到 List 集合中：</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoCollect</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] array = &#123; <span class="string">"Java"</span>, <span class="string">"Groovy"</span>, <span class="string">"Scala"</span>, <span class="string">"Kotlin"</span> &#125;;</span><br><span class="line">List&lt;String&gt; list = Stream.of(array).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Stream流&lt;/p&gt;
&lt;p&gt;   示例：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>类和集合等</title>
    <link href="http://yoursite.com/all/technology/%E7%B1%BB%E5%92%8C%E9%9B%86%E5%90%88%E7%AD%89/"/>
    <id>http://yoursite.com/all/technology/类和集合等/</id>
    <published>2019-07-31T01:53:20.000Z</published>
    <updated>2019-08-01T06:20:07.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>  java.lang.Object类是java语言中的根类，即所有的类的父类。它描述的所有方法子类都可以使用。。在对象实例化的时候，最终找的父类就是Object。如果一个类没有特别指定父类，那么默认则继承自Object类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ </span>&#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//返回该对象的字符串表示。</span></span><br></pre></td></tr></table></figure><p>  toString方法返回该对象的字符串表示，其实该字符串内容就是对象的类型+@+内存地址值。由于toString方法返回的结果是内存地址，而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，因此也需要重写它。</p><h6 id="覆盖重写"><a href="#覆盖重写" class="headerlink" title="覆盖重写"></a>覆盖重写</h6><p>  如果不希望使用toString方法的默认行为，则可以对它进行覆盖重写。例如自定义的Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Person&#123;"</span> + <span class="string">"name='"</span> + name + <span class="string">'\''</span> + <span class="string">", age="</span> + age + <span class="string">'&#125;'</span>;</span><br><span class="line">  &#125; <span class="comment">// 省略构造器与Getter Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快捷键的使用 alt+insert；</p><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> ：</span></span><br><span class="line"><span class="function"><span class="comment">//指示其他某个对象是否与此对象“相等”</span></span></span><br></pre></td></tr></table></figure><h6 id="默认地址比较"><a href="#默认地址比较" class="headerlink" title="默认地址比较"></a>默认地址比较</h6><p>  如果没有覆盖重写equals方法，那么Object类中默认进行 == 运算符的对象地址比较，只要不是同一个对象，结果必然为false</p><h6 id="对象内容比较"><a href="#对象内容比较" class="headerlink" title="对象内容比较"></a>对象内容比较</h6><p>  如果希望进行对象的内容比较，即所有或指定的部分成员变量相同就判定两个对象相同，则可以覆盖重写equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span>    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 如果对象地址一样，则认为相同</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == o)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 如果参数为空，或者类型信息不一样，则认为不同</span></span><br><span class="line"><span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 转换为当前类型</span></span><br><span class="line">Person person = (Person) o;</span><br><span class="line">  <span class="comment">// 要求基本类型相等，并且将引用类型java.util.Objects类的equals静态方法取用结果</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> age == person.age &amp;&amp;Objects.equals(name, person.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  快捷键：alt+insert 选择 equals() and hashCode() 进行自动代码生成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span></span>; </span><br><span class="line"><span class="comment">//判断两个对象是否相等</span></span><br></pre></td></tr></table></figure><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><p>   java.util.Date类，表示忒定的瞬间，精确到毫秒。</p><p>   public Date() ：分配Date对象并初始化此对象，以表示分配它的时间（精确到毫秒）。<br>   public Date(long date) ：分配Date对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即1970年1月1日00:00:00 GMT）以来的指定毫秒数</p><p>  使用无参构造，可以自动设置当前系统时间的毫秒时刻；指定long类型的构造参数，可以自定义毫秒时刻。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Date</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建日期对象，把当前的时间</span></span><br><span class="line">    </span><br><span class="line">System.out.println(<span class="keyword">new</span> Date()); </span><br><span class="line"><span class="comment">// Tue Jan 16 14:37:35 CST 2018</span></span><br><span class="line"><span class="comment">// 创建日期对象，把当前的毫秒值转成日期对象</span></span><br><span class="line">    </span><br><span class="line">System.out.println(<span class="keyword">new</span> Date(<span class="number">0L</span>)); </span><br><span class="line"><span class="comment">// Thu Jan 01 08:00:00 CST 1970</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//把日期对象转化成对应的时间毫米毫秒</span></span><br></pre></td></tr></table></figure><p>DateFormat类</p><p>   java.text.DateFormat是日期/时间格式化子类的抽象类，我们通过这个类可以帮我们完成如期和文本之间的转换，也就是可以在Date对象与String对象之间进行来回转换。</p><p>  格式化：按照指定的格式，从Date对象转换为String对象。<br>  解析：按照指定的格式，从String对象转换为Date对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">(String pattern)</span> </span>;</span><br><span class="line"><span class="comment">//用给定的模式和默认语言环境的日期格式符号构造SimpleDateFormat。</span></span><br></pre></td></tr></table></figure><p>格式规则：</p><p>y——年、M——月、d——日、H——时、m——分、s——秒</p><p>创建SimpleDateFormat对象的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormat</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 对应的日期格式如：2018‐01‐16 15:06:38</span></span><br><span class="line">DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy‐MM‐dd HH:mm:ss"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DateFormat类的常用方法有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">(Date date)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//将Date对象格式化为字符串</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//将字符串解析为Date对象。</span></span></span><br></pre></td></tr></table></figure><p>format方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把Date对象转换成String</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">// 创建日期格式化对象,在获取格式化对象时可以指定风格</span></span><br><span class="line">DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line">String str = df.format(date);</span><br><span class="line">System.out.println(str); <span class="comment">// 2008年1月23日</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>parst方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把String转换成Date对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line">String str = <span class="string">"2018年12月11日"</span>;</span><br><span class="line">Date date = df.parse(str);</span><br><span class="line">System.out.println(date); <span class="comment">// Tue Dec 11 00:00:00 CST 2018</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><p>日历类</p><p>get/set方法：get方法用来获取指定字段的值，set方法用来设置指定字段的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarUtil</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建Calendar对象</span></span><br><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line"><span class="comment">// 设置年</span></span><br><span class="line"><span class="keyword">int</span> year = cal.get(Calendar.YEAR);</span><br><span class="line"><span class="comment">// 设置月</span></span><br><span class="line"><span class="keyword">int</span> month = cal.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 设置日</span></span><br><span class="line"><span class="keyword">int</span> dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line">cal.set(Calendar.YEAR, <span class="number">2020</span>);</span><br><span class="line">System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>); <span class="comment">// 2020年1月17日</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="getTime方法"><a href="#getTime方法" class="headerlink" title="getTime方法"></a>getTime方法</h6><p>Calendar中的getTime方法并不是获取毫秒时刻，而是拿到对应的Date对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i</span><br><span class="line">mport java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09CalendarMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line">Date date = cal.getTime();</span><br><span class="line">System.out.println(date); <span class="comment">// Tue Jan 16 16:03:09 CST 2018</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="system类"><a href="#system类" class="headerlink" title="system类"></a>system类</h2><p>   java.lang.System   类中提供了大量的静态方法，可以获取与系统相关的信息或系统级操作.</p><p>currentTimeMillis方法</p><p>验证for循环打印数字1-9999所需要使用的时间（毫秒）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">System</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125; l</span><br><span class="line">ong end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"共耗时毫秒："</span> + (end ‐ start));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="arraycopy方法"><a href="#arraycopy方法" class="headerlink" title="arraycopy方法"></a>arraycopy方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span> </span></span><br><span class="line"><span class="function">    <span class="comment">//将数组中指定的数据拷贝到另一个数组中。</span></span></span><br></pre></td></tr></table></figure><p>  将src数组中前3个元素，复制到dest数组的前3个位置上复制元素前：src数组元素[1,2,3,4,5]，dest数组元素[6,7,8,9,10]复制元素后：src数组元素[1,2,3,4,5]，dest数组元素[1,2,3,9,10]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11SystemArrayCopy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] src = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] dest = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">System.arraycopy( src, <span class="number">0</span>, dest, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">/*代码运行后：两个数组中的元素发生了变化</span></span><br><span class="line"><span class="comment">src数组元素[1,2,3,4,5]</span></span><br><span class="line"><span class="comment">dest数组元素[1,2,3,9,10]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StringBulider类"><a href="#StringBulider类" class="headerlink" title="StringBulider类"></a>StringBulider类</h2><p>  由于String类的对象内容不可改变，所以每当进行字符串拼接时，总是会在内存中创建一个新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s = <span class="string">"Hello"</span>;</span><br><span class="line">s += <span class="string">"World"</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h2><p> 集合是java中提供的一种容器，可以用来存储多个数据。</p><p>  <em>集合和数组既然都是容器，它们有啥区别呢？</em><br>  数组的长度是固定的。集合的长度是可变的。数组中存储的是同一类型的元素，可以存储基本数据类型值。集合存储的都是对象。而且对象的类型可以不一致。在开发中一般当对象多的时候，使用集合进行存储。</p><p>  集合按照其存储结构可以分为两大类：</p><p>  分别是单列集合 java.util.Collection 和双列集合 java.util.Map</p><p>collection常用功能</p><p>public boolean add(E e) ： 把给定的对象添加到当前集合中 。<br>public void clear() :清空集合中所有的元素。<br>boolean remove(E e) : 把给定的对象在当前集合中删除。<br>boolean contains(E e) : 判断当前集合中是否包含给定的对象。<br>public boolean isEmpty() : 判断当前集合是否为空。<br>public int size() : 返回集合中元素的个数。<br>public Object[] toArray() : 把集合中的元素，存储到数组中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Collection</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建集合对象</span></span><br><span class="line"><span class="comment">//使用多态形式</span></span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line"><span class="comment">// 添加功能 boolean add(String s)</span></span><br><span class="line">coll.add(<span class="string">"小李广"</span>);</span><br><span class="line">coll.add(<span class="string">"扫地僧"</span>);</span><br><span class="line">coll.add(<span class="string">"石破天"</span>);</span><br><span class="line">System.out.println(coll);</span><br><span class="line"><span class="comment">// boolean contains(E e) 判断o是否在集合中存在</span></span><br><span class="line">System.out.println(<span class="string">"判断 扫地僧 是否在集合中"</span>+coll.contains(<span class="string">"扫地僧"</span>));</span><br><span class="line"><span class="comment">//boolean remove(E e) 删除在集合中的o元素</span></span><br><span class="line">System.out.println(<span class="string">"删除石破天："</span>+coll.remove(<span class="string">"石破天"</span>));</span><br><span class="line">System.out.println(<span class="string">"操作之后集合中元素:"</span>+coll);</span><br><span class="line"><span class="comment">// size() 集合中有几个元素</span></span><br><span class="line">System.out.println(<span class="string">"集合中有"</span>+coll.size()+<span class="string">"个元素"</span>);</span><br><span class="line"><span class="comment">// Object[] toArray()转换成一个Object数组</span></span><br><span class="line">Object[] objects = coll.toArray();</span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">System.out.println(objects[i]);</span><br><span class="line">&#125; /</span><br><span class="line">/ <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> 清空集合</span></span><br><span class="line"><span class="function">coll.<span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">System.out.println(<span class="string">"集合中内容为："</span>+coll);</span><br><span class="line"><span class="comment">// boolean isEmpty() 判断是否为空</span></span><br><span class="line">System.out.println(coll.isEmpty());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Iterator迭代器</p><p>  <strong>迭代</strong>：即Collection集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</p><p><em>Iterator接口的常用方法如下：</em><br>public E next() :返回迭代的下一个元素。<br>public boolean hasNext() :如果仍有元素可以迭代，则返回 true。</p><p>例题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 使用多态方式 创建对象</span></span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">// 添加元素到集合</span></span><br><span class="line">coll.add(<span class="string">"串串星人"</span>);</span><br><span class="line">coll.add(<span class="string">"吐槽星人"</span>);</span><br><span class="line">coll.add(<span class="string">"汪星人"</span>);</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="comment">//使用迭代器 遍历 每个集合对象都有自己的迭代器</span></span><br><span class="line">Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line"><span class="comment">// 泛型指的是 迭代出 元素的数据类型</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123; <span class="comment">//判断是否有迭代元素</span></span><br><span class="line">String s = it.next();<span class="comment">//获取迭代出的元素</span></span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>迭代器的实现原理：</em></p><p>  当遍历集合时，首先通过调用t集合的iterator()方法获得迭代器对象，然后使用hashNext()方法判断集合中是否存在下一个元素，如果存在，则调用next()方法将元素取出，否则说明已到达了集合末尾，停止遍历元素。</p><p><em>迭代集合元素：</em></p><p>1.指针当前位置判断hasNext()为true</p><p>2.执行next()获取元素，移动指针来到下一个元素之前</p><p>  在调用Iterator的next方法之前，迭代器的索引位于第一个元素之前，不指向任何元素，当第一次调用迭代器的next方法后，迭代器的索引会向后移动一位，指向第一个元素并将该元素返回，当再次调用next方法时，迭代器的索引会指向第二个元素并将该元素返回，依此类推，直到hasNext方法返回false，表示到达了集合的末尾，终止对元素的遍历。</p><h6 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h6><p>遍历数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素的数据类型 变量 : Collection集合or数组)&#123;</span><br><span class="line"><span class="comment">//写操作代码</span></span><br><span class="line">&#125;<span class="comment">//格式</span></span><br><span class="line"></span><br><span class="line">第一种：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBForDemo1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">87</span>&#125;;</span><br><span class="line"><span class="comment">//使用增强for遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a : arr)&#123;<span class="comment">//a代表数组中的每个元素</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125; Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">coll.add(<span class="string">"小河神"</span>);</span><br><span class="line">coll.add(<span class="string">"老河神"</span>);</span><br><span class="line">coll.add(<span class="string">"神婆"</span>);</span><br><span class="line"><span class="keyword">for</span>(String s :coll)&#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBFor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">coll.add(<span class="string">"小河神"</span>);</span><br><span class="line">coll.add(<span class="string">"老河神"</span>);</span><br><span class="line">coll.add(<span class="string">"神婆"</span>);</span><br><span class="line"><span class="comment">//使用增强for遍历</span></span><br><span class="line"><span class="keyword">for</span>(String s :coll)&#123;<span class="comment">//接收变量s代表 代表被遍历到的集合元素</span></span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p><strong>定义：</strong>可以在类或方法中预支地使用未知的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;代表泛型的变量&gt; </span>&#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(String e)</span></span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123; &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>含有泛型的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数)&#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericMethod</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> &lt;MVP&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">System.out.println(mvp.getClass());</span><br><span class="line">&#125; p</span><br><span class="line">ublic &lt;MVP&gt; <span class="function">MVP <span class="title">show2</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mvp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型的接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span>接口名&lt;代表泛型的变量&gt; </span>&#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> E <span class="title">getE</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImp1</span> <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 省略...</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="综合案例："><a href="#综合案例：" class="headerlink" title="综合案例："></a>综合案例：</h2><p>  按照斗地主的规则，完成洗牌发牌的动作。 具体规则：<br>  使用54张牌打乱顺序,三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</p><p>  准备牌：牌可以设计为一个ArrayList,每个字符串为一张牌。 每张牌由花色数字两部分组成，我们可以使用花色集合与数字集合嵌套迭代完成每张牌的组装。 牌由Collections类的shuffle方法进行随机排序。</p><p>  发牌：将每个人以及底牌设计为ArrayList,将最后3张牌直接存放于底牌，剩余牌通过对3取模依次发牌。</p><p>  看牌：直接打印每个集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poker</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 1: 准备牌操作</span></span><br><span class="line"><span class="comment">*/</span>*/</span><br><span class="line"><span class="comment">//1.1 创建牌盒 将来存储牌面的</span></span><br><span class="line">ArrayList&lt;String&gt; pokerBox = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//1.2 创建花色集合</span></span><br><span class="line">ArrayList&lt;String&gt; colors = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//1.3 创建数字集合</span></span><br><span class="line">ArrayList&lt;String&gt; numbers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//1.4 分别给花色 以及 数字集合添加元素</span></span><br><span class="line">colors.add(<span class="string">"♥"</span>);</span><br><span class="line">colors.add(<span class="string">"♦"</span>);</span><br><span class="line">colors.add(<span class="string">"♠"</span>);</span><br><span class="line">colors.add(<span class="string">"♣"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">numbers.add(i+<span class="string">""</span>);</span><br><span class="line">&#125; n</span><br><span class="line">umbers.add(<span class="string">"J"</span>);</span><br><span class="line">numbers.add(<span class="string">"Q"</span>);</span><br><span class="line">numbers.add(<span class="string">"K"</span>);</span><br><span class="line">numbers.add(<span class="string">"A"</span>);</span><br><span class="line"><span class="comment">//1.5 创造牌 拼接牌操作</span></span><br><span class="line"><span class="comment">// 拿出每一个花色 然后跟每一个数字 进行结合 存储到牌盒中</span></span><br><span class="line"><span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line"><span class="comment">//color每一个花色</span></span><br><span class="line"><span class="comment">//遍历数字集合</span></span><br><span class="line"><span class="keyword">for</span>(String number : numbers)&#123;</span><br><span class="line"><span class="comment">//结合</span></span><br><span class="line">String card = color+number;</span><br><span class="line"><span class="comment">//存储到牌盒中</span></span><br><span class="line">pokerBox.add(card);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.6大王小王</span></span><br><span class="line">pokerBox.add(<span class="string">"小☺"</span>);</span><br><span class="line">pokerBox.add(<span class="string">"大☠"</span>);</span><br><span class="line"><span class="comment">// System.out.println(pokerBox);</span></span><br><span class="line"><span class="comment">//洗牌 是不是就是将 牌盒中 牌的索引打乱</span></span><br><span class="line"><span class="comment">// Collections类 工具类 都是 静态方法</span></span><br><span class="line"><span class="comment">// shuffer方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* static void shuffle(List&lt;?&gt; list)</span></span><br><span class="line"><span class="comment">* 使用默认随机源对指定列表进行置换。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//2:洗牌</span></span><br><span class="line">Collections.shuffle(pokerBox);</span><br><span class="line"><span class="comment">//3 发牌</span></span><br><span class="line"><span class="comment">//3.1 创建 三个 玩家集合 创建一个底牌集合</span></span><br><span class="line">ArrayList&lt;String&gt; player1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">ArrayList&lt;String&gt; player2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">ArrayList&lt;String&gt; player3 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">ArrayList&lt;String&gt; dipai = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//遍历 牌盒 必须知道索引</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;pokerBox.size();i++)&#123;</span><br><span class="line"><span class="comment">//获取 牌面</span></span><br><span class="line">String card = pokerBox.get(i);</span><br><span class="line"><span class="comment">//留出三张底牌 存到 底牌集合中</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">51</span>)&#123;<span class="comment">//存到底牌集合中</span></span><br><span class="line">dipai.add(card);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//玩家1 %3 ==0</span></span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">player1.add(card);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;<span class="comment">//玩家2</span></span><br><span class="line">player2.add(card);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//玩家3</span></span><br><span class="line">player3.add(card);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; /</span><br><span class="line">/看看</span><br><span class="line">System.out.println(<span class="string">"令狐冲："</span>+player1);</span><br><span class="line">System.out.println(<span class="string">"田伯光："</span>+player2);</span><br><span class="line">System.out.println(<span class="string">"绿竹翁："</span>+player3);</span><br><span class="line">System.out.println(<span class="string">"底牌："</span>+dipai);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Object类&quot;&gt;&lt;a href=&quot;#Object类&quot; class=&quot;headerlink&quot; title=&quot;Object类&quot;&gt;&lt;/a&gt;Object类&lt;/h2&gt;&lt;p&gt;  java.lang.Object类是java语言中的根类，即所有的类的父类。它描述的所有方法子类
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="http://yoursite.com/all/technology/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/all/technology/网络编程/</id>
    <published>2019-07-30T02:25:21.000Z</published>
    <updated>2019-07-30T11:56:40.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h3 id="软件结构："><a href="#软件结构：" class="headerlink" title="软件结构："></a>软件结构：</h3><p>  c/s结构：全称为Client/Server结构，是客户端和服务器的结构。常见程序有QQ、迅雷、各种市场上的播放器等软件。</p><p>  b/s结构：全称为Browser/Server结构，是指浏览器和服务器结构。常见有各种的市场上的浏览器如谷歌，火狐等。</p><p>  两种架构，都离不开网络的支持。网络编程，就是在一定的协议下，实现两台计算机的通信的程序。</p><h3 id="网络通信协议："><a href="#网络通信协议：" class="headerlink" title="网络通信协议："></a>网络通信协议：</h3><p>   定义：通信协议是对计算机必须遵守的规则，只有遵守这些规则，计算机之间才能进行通信。这就好比在道路中行驶的汽车一定要遵守交通规则一样，协议中对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守，最终完成数据交换。</p><p>   TCP/IP协议：是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</p><p>  应用层：HTTP  FTP  TFTP  SMTP  SNMP  DNS</p><p>  传输层：TCP UDP</p><p>  网络层：ICMP IGMP   IP    ARP  RARP</p><p>  数据链路层  物理层： 由底层网络定义的协议</p><p>  TCP 协议是面向连接的通信协议，即传输数据之前在发送端和接受端建立逻辑连接，然后在传输数据，他提供了两台计算机之间可靠无差错的数据传输。</p><p>  三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。<br>  第一次握手，客户端向服务器端发出连接请求，等待服务器确认。<br>  第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。<br>  第三次握手，客户端再次向服务器端发送确认信息，确认连接。</p><h3 id="网络编程三要素："><a href="#网络编程三要素：" class="headerlink" title="网络编程三要素："></a>网络编程三要素：</h3><p>  协议：计算机网络通信必须遵守的规则。</p><p>IP地址：指互联网协议地址（Internet Protocol Address），俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。</p><p>IP地址分类：<br>  IPv4：是一个32位的二进制数，通常被分为4个字节，表示成a.b.c.d 的形式，例如192.168.65.100 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。<br>   IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。资料显示：全球IPv4地址在2011年2月分配完毕。</p><p>  本机IP：在控制台输入：ipconfig</p><p> 检查网络是否连通在控制台输入：ping 空格 IP 地址</p><p>  端口号：用两个字节表示的整数，它的取值范围是0<del>65535。其中，0</del>1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</p><p><strong>利用协议+IP地址+端口号 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</strong></p><h2 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h2><p>  定义：TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）与服务端（Server）。</p><p>两端通信的步骤：</p><ol><li>服务端程序，需要事先启动，等待客户端的连接。</li></ol><ol start="2"><li><p>客户端主动连接服务器端，连接成功才能通信。服务端不可以主动连接客户端。</p><p>(客户端：java.net.Socket 类表示。创建Socket对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</p><p>服务端：java.net.ServerSocket 类表示。创建ServerSocket对象，相当于开启一个服务，并等待客户端的连接。)</p></li></ol><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><p> Socket类：该类实现客户端套接字段（两台设备之间通讯的端点）。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Socket</span><span class="params">(String host,<span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//Socket client = new Socket("localhost",1111);</span></span></span><br></pre></td></tr></table></figure><p> 创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。 </p><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><p>public InputStream getInputStream() ： 返回此套接字的输入流。<br>  如果此Scoket具有相关联的通道，则生成的InputStream 的所有操作也关联该通道。<br>  关闭生成的InputStream也将关闭相关的Socket。<br>public OutputStream getOutputStream() ： 返回此套接字的输出流。<br>  如果此Scoket具有相关联的通道，则生成的OutputStream 的所有操作也关联该通道。<br>  关闭生成的OutputStream也将关闭相关的Socket。<br>public void close() ：关闭此套接字。<br>  一旦一个socket被关闭，它不可再使用。<br>  关闭此socket也将关闭相关的InputStream和OutputStream 。<br>public void shutdownOutput() ： 禁用此套接字的输出流。<br>  任何先前写出的数据将被发送，随后终止输出流。 </p><p> ServerSocket类：这个类实现了服务器套接字，该对象等待通过网络的请求。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServerSocket</span><span class="params">(<span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function">  <span class="comment">// ServerSocket server = new ServerSocket(1111);</span></span></span><br></pre></td></tr></table></figure><p>使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指<br>定的端口号上，参数port就是端口号。</p><h3 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h3><p>  public Socket accept() ：侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。该方法会一直阻塞直到建立连接。</p><h3 id="客户端向服务器发送数据"><a href="#客户端向服务器发送数据" class="headerlink" title="客户端向服务器发送数据"></a>客户端向服务器发送数据</h3><h4 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[]args）<span class="keyword">throws</span> IOException&#123;</span><br><span class="line">System.out.println（“服务端启动，等待连接<span class="string">"）；</span></span><br><span class="line"><span class="string">//1.创建Serversocket对象，绑定端口，开始等待连接</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">ServerSocket ss=new ServerSocket（1111）；</span></span><br><span class="line"><span class="string">//2.接收连接accept 方法，返回socket对象.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Socket server =ss.accept（）；</span></span><br><span class="line"><span class="string">//3.通过socket获取输入流</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">InputStream is=server.getInputstream（）；</span></span><br><span class="line"><span class="string">//4.一次性读取数据//4.1创建字节数组</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">byte[]b=new byte[1824]；</span></span><br><span class="line"><span class="string">//4.2据读取到字节数组中。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">int 1en=is.read（b）；</span></span><br><span class="line"><span class="string">//4.3解析数组，打印字符串信息</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">String msg=new String（b，e，1en）；System.out.print1n（msg）；</span></span><br><span class="line"><span class="string">//5.关闭资源.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">is.close（）；</span></span><br><span class="line"><span class="string">server.close（）；</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="客户端实现："><a href="#客户端实现：" class="headerlink" title="客户端实现："></a>客户端实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTCP</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[]args）<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">system.out.print1n（“客户端发送数据<span class="string">"）；</span></span><br><span class="line"><span class="string">//1.创建Socket（ip，port），确定连接到哪里.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Socket client=new Socket（"</span>localhost<span class="string">"，1111）；</span></span><br><span class="line"><span class="string">//2.获取流对象，输出流</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">OutputStream os=c1ient.getoutputStream（）；</span></span><br><span class="line"><span class="string">//3.写出数据。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">os.write（“你好么？tcp，我来了”.getBytes（））；</span></span><br><span class="line"><span class="string">//4.关闭资源。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">os.close（）；</span></span><br><span class="line"><span class="string">client.close（）；</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="服务器向客户端回写数据"><a href="#服务器向客户端回写数据" class="headerlink" title="服务器向客户端回写数据"></a>服务器向客户端回写数据</h3><h4 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[]args）<span class="keyword">throws</span> IOException&#123;</span><br><span class="line">system.out.println（“服务端启动，等待连接.…<span class="string">"）；</span></span><br><span class="line"><span class="string">/∥1.创建serversocket对象，绑定端口，开始等待连接ServerSocket ss=new Serversocket（6666）；</span></span><br><span class="line"><span class="string">//2.接收连接accept 方法，返回socket对象.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Socket server=ss.accept（）；    </span></span><br><span class="line"><span class="string">//3.通i过socket 获取输入流</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Inputstream is=server.getInputStream（）；    </span></span><br><span class="line"><span class="string">//4.一次性读取数据//4.1创建字节数组</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">byte[]b=new byte[1024]；</span></span><br><span class="line"><span class="string">//4.2据读取到字节数组中.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">int 1en=is.read（b）；</span></span><br><span class="line"><span class="string">//4.3解析数组，打印字符串信息</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">String msg=new String（b，e，1en）；System.out.print1n（msg）；</span></span><br><span class="line"><span class="string">//==ss=sa==sassm==回写数据-as===a=m=#sam=ms=#司===</span></span><br><span class="line"><span class="string">//s.通过socket获取输出流</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">OutputStream out=server.getoutputstream（）；</span></span><br><span class="line"><span class="string">//6.回写数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">out.write（“我很好，谢谢你”.getBytes（））；</span></span><br><span class="line"><span class="string">//7.关闭资源.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">out.close（）；</span></span><br><span class="line"><span class="string">is.close（）；</span></span><br><span class="line"><span class="string">server.close（）；</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTcP</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[]args）<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">System.out.println（“客户端发送数据<span class="string">"）；</span></span><br><span class="line"><span class="string">//1.创建Socket（ip，port），确定连接到哪里，</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Socket client=new Socket（"</span><span class="number">1</span>ocalhost<span class="string">"，6666）；    </span></span><br><span class="line"><span class="string">//2.通过Scoket，获取输出流对象</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Outputstream os=client.getoutputStream（）；</span></span><br><span class="line"><span class="string">//3.写出数据.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">os.write（“你好么？tcp，我来了"</span>.getBytes（））；</span><br><span class="line"><span class="comment">//=ssssacasnsans解析回写amwwascanacwsssawsacn的wa部</span></span><br><span class="line"><span class="comment">//4.通过Scoket，获取输入流对象</span></span><br><span class="line">    </span><br><span class="line">Inputstream in =client.getInputStream（）；</span><br><span class="line"><span class="comment">//5.读取数据数据</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">byte</span>[]b=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1</span>ee]；</span><br><span class="line"><span class="keyword">int</span> <span class="number">1</span>en=in.read（b）；</span><br><span class="line">System.out.println（<span class="keyword">new</span> String（b，e，<span class="number">1</span>en））；</span><br><span class="line"><span class="comment">//6.关闭资源，</span></span><br><span class="line">    </span><br><span class="line">in.close（）；</span><br><span class="line">os.close（）；</span><br><span class="line">client.close（）；</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络编程&quot;&gt;&lt;a href=&quot;#网络编程&quot; class=&quot;headerlink&quot; title=&quot;网络编程&quot;&gt;&lt;/a&gt;网络编程&lt;/h1&gt;&lt;h3 id=&quot;软件结构：&quot;&gt;&lt;a href=&quot;#软件结构：&quot; class=&quot;headerlink&quot; title=&quot;软件结构：&quot;&gt;
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>在windows系统 blog的构建</title>
    <link href="http://yoursite.com/all/technology/%E5%9C%A8windows%E7%B3%BB%E7%BB%9F%20blog%E7%9A%84%E6%9E%84%E5%BB%BA/"/>
    <id>http://yoursite.com/all/technology/在windows系统 blog的构建/</id>
    <published>2019-07-27T10:47:42.000Z</published>
    <updated>2019-07-30T02:26:45.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在windows系统-blog的构建"><a href="#在windows系统-blog的构建" class="headerlink" title="在windows系统 blog的构建"></a>在windows系统 blog的构建</h1><h2 id="1-下载的工具"><a href="#1-下载的工具" class="headerlink" title="1.下载的工具"></a>1.下载的工具</h2><p>  nodejs 、github一直默认就好。（安装时可以安装到其他盘中）</p><h2 id="2-安装git和nodejs"><a href="#2-安装git和nodejs" class="headerlink" title="2.安装git和nodejs"></a>2.安装git和nodejs</h2><p>  先安装好git和nodejs后。右键选着git bush。输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>   等出现相应的版本好是表示安装成功。</p><h2 id="3-开始安装hexo。"><a href="#3-开始安装hexo。" class="headerlink" title="3.开始安装hexo。"></a>3.开始安装hexo。</h2><p>​     先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>出现相应的版本号即为成功。</p><p>接着初始化hexo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>   打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。使用ctrl+c可以把服务关掉。</p><h2 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4.GitHub创建个人仓库"></a>4.GitHub创建个人仓库</h2><p> 首先，你先要有一个GitHub账户，去注册一个吧。</p><p> 注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p><p>  创建一个和你用户名相同的仓库，<a href="http://xn--yfr16an19l.github.io" target="_blank" rel="noopener">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href="http://xn--xxxx-4m5f354ev5p.github.io" target="_blank" rel="noopener">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p>  点击create repository</p><h2 id="5-生成ssh添加到Github"><a href="#5-生成ssh添加到Github" class="headerlink" title="5.生成ssh添加到Github"></a>5.生成ssh添加到Github</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">git config --global user.email <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>用上面这个语言检查。</p><p>在输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>然后在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git<span class="meta">@github</span>.com</span><br></pre></td></tr></table></figure><p>验证是否成功。</p><h2 id="6-把hexo部署到GitHub"><a href="#6-把hexo部署到GitHub" class="headerlink" title="6.把hexo部署到GitHub"></a>6.把hexo部署到GitHub</h2><p>  将hexo生成的文章部署到GitHub上，打开站点配置文件<code>_config.yml</code>，翻到最后，修改为YourgithubName就是你的GitHub账户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:<span class="comment">//github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>  这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>  其中 hexo clean清除了你之前生成的东西，也可以不加。<br>         hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>         hexo deploy 部署文章，可以用hexo d缩写</p><p>  当输入hexo d时需 要你输入username和password。</p><h2 id="7-改主题的风格"><a href="#7-改主题的风格" class="headerlink" title="7.改主题的风格"></a>7.改主题的风格</h2><p>  你可以去网站<a href="https://hexo.io/themes/改你博客的主题选着自己喜欢的。" target="_blank" rel="noopener">https://hexo.io/themes/改你博客的主题选着自己喜欢的。</a></p><h2 id="8-改后相关的操作"><a href="#8-改后相关的操作" class="headerlink" title="8.改后相关的操作"></a>8.改后相关的操作</h2><p>  如rss等，以及改相关的主页信息</p><h2 id="9-创建文章"><a href="#9-创建文章" class="headerlink" title="9.创建文章"></a>9.创建文章</h2><p>  输入 hexo new post ‘yourpost’ 创建你自己的文章。创建好后相关文件会在_psot文件夹下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在windows系统-blog的构建&quot;&gt;&lt;a href=&quot;#在windows系统-blog的构建&quot; class=&quot;headerlink&quot; title=&quot;在windows系统 blog的构建&quot;&gt;&lt;/a&gt;在windows系统 blog的构建&lt;/h1&gt;&lt;h2 id=&quot;1
      
    
    </summary>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/all/technology/hello-world/"/>
    <id>http://yoursite.com/all/technology/hello-world/</id>
    <published>2019-07-25T23:58:41.032Z</published>
    <updated>2019-07-25T23:58:41.032Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
