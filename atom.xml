<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wake Up</title>
  
  <subtitle>这是一个在学习中的人的blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-02T06:11:23.625Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>紫鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XML</title>
    <link href="http://yoursite.com/all/XML/"/>
    <id>http://yoursite.com/all/XML/</id>
    <published>2019-08-02T02:13:58.000Z</published>
    <updated>2019-08-02T06:11:23.625Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>  xml是指可扩展标记语言（eXtensible  Markup Language）它是一种标记语言，很类似HTML。它是一种标记语言，很类似HTML。它被设计的宗旨是传输数据而非显示数据。</p><p><strong><em>xml***</em></strong>技术可以解决的问题***</p><p>•XML语言出现的根本目的在于描述有关系的数据。如：省市。</p><p>•XML是一种通用的数据交换格式</p><p>•在XML语言中，它允许用户自定义标签。一个标签用于描述一个数据；一个标签可分为开始标签和结束标签，在起始标签之间，又可以使用其他标签描述其他数据，以此来实现数据关系的描述。</p><p>•XML中的数据必须通过软件程序来解析执行或者显示，如IE;这样的解析程序称之为Parser（解析器）</p><h3 id="xml文档的组成"><a href="#xml文档的组成" class="headerlink" title="xml文档的组成"></a>xml文档的组成</h3><h5 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h5><p>•在编写XML文档时，需要先使用文档声明来声明XML文档.且必须出现在文档的第一行</p><p>•最简单的语法：<?xml version="1.0"?></p><p>•用encoding属性说明文档所使用的字符编码，默认为UTF-8.保存在磁盘上的文件编码要与声明的编码一致。</p><p>•如：<?xml  version="1.0"  encoding="GB2312"?></p><p>•用standalone属性说明文档是否独立，即是否依赖其他文档。</p><p>•如：<?xml  version="1.0" standalone="yes"?></p><h5 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h5><p>•XML元素指XML文件中出现的标签。一个标签分为起始和结束标签不能省略。一个标签有如下几种书写形式：</p><p>–包含标签主体：<mytag>some content</mytag></p><p>–不含标签主体：<mytag></mytag></p><p>•一个标签中可以嵌套若干子标签，但所有标签必须合理的嵌套，不允许有交叉嵌套。</p><p>–<mytag1><mytag2></mytag2></mytag1>WRONG</p><p>•一个XML文档必须有且仅有一个根标签，其他标签都是这个根标签的子标签或者孙标签</p><p>•XML中不会忽略主体内容中出现的空格和换行。</p><p>•第一段    –&lt;中国&gt;&lt;北京&gt;&lt;海淀/&gt;&lt;/北京&gt;&lt;/中国&gt;  </p><p>•第二段   –&lt;中国&gt;\r\n\t&lt;北京&gt;&lt;海淀/&gt;&lt;/北京&gt;&lt;/中国&gt;</p><p><em>注</em>：由于在XML中，空格和换行都作为原始内容被处理，所以，在编写XML文件时，使用换行和缩进等方式来让原文件中的内容清晰可读的”良好”书写习惯可能要被迫改变</p><h5 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h5><p>•一个元素可以有多个属性，每个属性都有自己的名称和取值。例：&lt;mytag name=”value”…./&gt;</p><p>•属性值一定要用引号(单引号或双引号)引起来</p><p>•属性名称的命名规范与元素的命名规范相同</p><p>•元素中的属性是不允许重复的</p><p>•在XML技术中，标签属性所代表的信息也可以被改成用子元素的形式来描述，例如：</p><p>–<mytag></mytag></p><p>•<name></name></p><p>   –<firstname></firstname></p><p>   –<lastname></lastname></p><p><strong>•元素命名规范</strong></p><p>•元素（标签）的名称可以包含字母、数字、减号、下划线和英文句点，但必须遵守下面的一些规范：</p><p>–严格区分大小写</p><p>–只能以字母或者下划线开头</p><p>–不能以XML开头</p><p>–名称字符之间不能有空格或者制表符</p><p>–名称字符之间不能使用冒号</p><p>##### </p><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>•XML中的注释语法为：<!--这是注释--></p><p>•<em>注意</em>：</p><p>–xml声明之前不能有注释</p><p>–注释不能嵌套</p><h5 id="CDATA区"><a href="#CDATA区" class="headerlink" title="CDATA区"></a>CDATA区</h5><p>•CDATA是Character   Data的缩写</p><p>•作用：把标签当做普通文本内容</p><p>•语法：<!--[CDATA[内容]]--></p><!--[CDATA[  <itcom>这是一个文本非标签</itcom>  ]]--><h5 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h5><p>•对于一些特殊字符，若要在元素主体内容中显示，必须进行转义</p><p>特殊字符  代替符号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  &amp;             &amp;amp;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;              &amp;<span class="attr">lt</span>;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  \&gt;</span>            &amp;gt;</span><br><span class="line"></span><br><span class="line">  "              &amp;quot;</span><br><span class="line"></span><br><span class="line">  '              &amp;apos;  </span><br><span class="line">~</span><br></pre></td></tr></table></figure><h5 id="处理指令-PI-Processing-Instruction"><a href="#处理指令-PI-Processing-Instruction" class="headerlink" title="处理指令 (PI:Processing  Instruction)"></a>处理指令 (PI:Processing  Instruction)</h5><p>•处理指令简称PI</p><p>•作用：用来指挥软件如何解析XML文档</p><p>•语法：必须以”<?"作为开头，以"?>“作为结尾</p><p>•常用处理指令：</p><p>–XML声明：<?xml  version="1.0" encoding="GB2312"?></p><p>–xml-stylesheet指令：</p><p>•作用：指示xml文档所使用的css样式xsl。</p><p>•<strong>注</strong>：对中文命名的标签元素不起作用</p><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>  DTD（Document Type Definition）：文档类型定义。<br>  作用：约束XML的书写规范</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">文件清单：book.xml</span><br><span class="line">&lt;？xml version=<span class="string">"1.0"</span>？&gt;</span><br><span class="line">&lt;IDOCTYPE 书架SYSTEM<span class="string">"book.dtd"</span>&gt;</span><br><span class="line">&lt;书架〉</span><br><span class="line">&lt;书&gt;</span><br><span class="line">〈书名&gt;Java就业培训教程&lt;/书名〉</span><br><span class="line">&lt;作者〉张孝祥&lt;/作者〉</span><br><span class="line">〈售价〉39.00元&lt;/售价〉</span><br><span class="line">&lt;/书&gt;</span><br><span class="line">〈书&gt;</span><br><span class="line">〈书名&gt;JavaScript网页开发&lt;/书名〉</span><br><span class="line">&lt;作者〉张孝祥&lt;/作者〉</span><br><span class="line">&lt;售价&gt;28.00元&lt;/售价&gt;</span><br><span class="line">&lt;/书&gt;</span><br><span class="line">〈/书架〉</span><br><span class="line"></span><br><span class="line">文件清单：book.dtd</span><br><span class="line">&lt;！ELEMENT 书架（书+）〉</span><br><span class="line">〈！ELEMENT书（书名，作者，售价）〉</span><br><span class="line">〈！ELEMENT 书名（#PCDATA）〉&lt;！ELEMENT 作者（#PCDATA）〉</span><br><span class="line">〈！ELEMENT售价（#PCDATA）〉</span><br></pre></td></tr></table></figure><p>DTD语法细节</p><h5 id="定义元素"><a href="#定义元素" class="headerlink" title="定义元素"></a>定义元素</h5><p>•在DTD文档中使用ELEMENT关键字来声明一个XML元素。</p><p>•语法：<!ELEMENT  元素名称  使用规则></p><p><strong>使用规则</strong></p><p>•(#PCDATA):指示元素的主体内容只能是普通的文本</p><p>•EMPTY：用于指示元素的主体为空</p><p>•ANY：用于指示元素的主体内容为任意类型</p><p>•(子元素)：指示元素中包含的子元素</p><p>–定义子元素及描述他们的关系</p><p>•如果子元素是用逗号分开，说明必须按照声明顺序去编写XML文档</p><p>   例：&lt;!ELEMENT FILE (TITLE,AUTHOR,EMAIL)</p><p>•如果子元素用”|”分开，说明任选其一</p><p>  例：&lt;!ELEMENT FILE (TITLE|AUTHOR|EMAIL)</p><p>•用+、*、？来表示元素出现的次数</p><p> –  如果元素后面没有+*？表示必须且只能出现一次</p><p> –  +表示至少出现一次，一次或多次</p><p> –  *：表示可有可无，零次，一次或者多次</p><p> – ？：表示可以有，也可以无，有的话只能有一次，零次或一次</p><p>  如：&lt;!ELEMENT MYFILE((TITLE<em>,AUTHOR?,EMAIL)</em>|COMMENT)</p><h5 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h5><p><strong>属性一</strong>：</p><p>在DTD文档中使用ATTLIST关键字来为一个元素声明属性</p><p>语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ATTLIST</span> 元素名</span></span><br><span class="line"><span class="tag">属性名<span class="attr">1</span>  属性值类型  设置说明</span></span><br><span class="line"><span class="tag">属性名<span class="attr">2</span>  属性值类型  设置说明</span></span><br><span class="line"><span class="tag">……</span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="tag">&lt;<span class="name">!ATTLIST</span> 商品</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">   类别  <span class="attr">CDATA</span> #<span class="attr">REQUIRED</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">   颜色 <span class="attr">CDATA</span>#<span class="attr">IMPLIED</span>         &gt;</span></span><br><span class="line"></span><br><span class="line">对应的XML为：<span class="tag">&lt;<span class="name">商品</span> 类别 =<span class="string">“服装”</span> 颜色=<span class="string">“黄色”/</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性二</strong></p><p>•属性值类型：</p><p>–CDATA：表示属性的取值为普通的文本字符串</p><p>–ENUMERATED(DTD没有此关键字)：表示枚举，只能从枚举列表中任选其一，如：(鸡肉|猪肉|鱼肉|牛肉)</p><p>–ID：表示属性的取值不能重复</p><p>•设置说明：</p><p>– #REQUIRED：表示该属性必须出现</p><p>– #IMPLIED：表示该属性可有可无</p><p>– #FIXED：表示属性的取值为一个固定值。语法：#FIXED“固定值”</p><p>直接值：表示属性的取值为该默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">&lt;？xml version=&quot;1.0&quot;encoding=&quot;GB2312&quot;？&gt;</span><br><span class="line">&lt;！DOCTYPE 联系人列表[</span><br><span class="line">&lt;！ELEMENT 联系人列表ANY〉</span><br><span class="line">&lt;！ELEMENT 联系人（姓名，EMAIL）〉</span><br><span class="line">&lt;！ELEMENT 姓名（#PCDATA）〉</span><br><span class="line">&lt;！ELEMENT EMAIL（#PCDATA）&gt;</span><br><span class="line">&lt;！ATTLIST 联系人编号ID#REQUIRED〉</span><br><span class="line">    ]&gt;</span><br><span class="line">〈联系人列表》</span><br><span class="line">〈联系人编号=“a&quot;&gt;&lt;姓名〉张三&lt;/姓名》</span><br><span class="line">&lt;EMAIL&gt;zhang@it315.org&lt;/EMAIL〉</span><br><span class="line">&lt;/联系人〉</span><br><span class="line">&lt;联系人编号=“b&quot;〉&lt;姓名〉李四&lt;/姓名〉</span><br><span class="line">&lt;EMAIL&gt;1i@it315.org&lt;/EMAIL〉</span><br><span class="line">&lt;/联系人〉</span><br><span class="line">&lt;/联系人列表〉</span><br></pre></td></tr></table></figure><h5 id="定义实体"><a href="#定义实体" class="headerlink" title="定义实体"></a>定义实体</h5><p>•概念：在DTD中定义，在DTD中使用</p><p>•语法：<!ENTITY %实体名称 "实体内容"></p><p>•引用方式(注意是在DTD中使用):%实体名称；</p><p> <em>例：</em></p><p>•DTD中定义：</p>  <!ELEMENT % TAG_NAMES "姓名|EMAIL|电 话|地址"><p>•DTD中引用:</p>  <!ELEMENT 个人信息(%TAG_NAMES;|生日)> <!ELEMENT 客户信息(%TAG_NAMES;|公司名)><h3 id="java解析XML概述"><a href="#java解析XML概述" class="headerlink" title="java解析XML概述"></a>java解析XML概述</h3><p>•XML解析方式分为两种：DOM方式和SAX方式</p><p>–DOM：Document  Object  Model,文档对象模型。这种方式是w3c推荐的处理XML的一种方式</p><p>–SAX：Simple API for XML 。这种方式不是官方标准，属于开源社区</p><p>•XML解析开发包</p><p>–JAXP：是SUN公司推出的解析标准实现。</p><p>–Dom4J：是开源组织推出的解析开发包。</p><p>–JDom：是开源组织推出的解析开发包</p><h6 id="JAXP"><a href="#JAXP" class="headerlink" title="JAXP"></a>JAXP</h6><p>JAXP：（Java API for XML Processing）开发包是javaSE的一部分，它由以下几个包及其子包组成:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">–org.w3c.dom:提供DOM方式解析XML的标准接口</span><br><span class="line"></span><br><span class="line">–org.xml.sax:提供SAX方式解析XML的标注接口</span><br><span class="line"></span><br><span class="line">–javax.xml:提供了解析XML文档的类</span><br></pre></td></tr></table></figure><p>•javax.xml.parsers包中,定义了几个工厂类.我们可以通过调用这些工厂类，得到对XML文档进行解析的DOM和SAX解析器对象。</p><p> –DocumentBuilderFactory</p><p> –SAXParserFactory</p><h6 id="使用JAXP进行DOM解析"><a href="#使用JAXP进行DOM解析" class="headerlink" title="使用JAXP进行DOM解析"></a>使用JAXP进行DOM解析</h6><p>  javax.xml.parsers包中的DocumentBuilderFactory用于创建DOM模式的解析器对象，DocumentBuilderFactory是一个抽象工厂类，它不能直接实例化，但该类提供了一个newInstance方法，这个方法会根据本地平台默认安装的解析器，自动创建一个工厂的对象并返回。</p><h6 id="获得JAXP中的DOM解析器"><a href="#获得JAXP中的DOM解析器" class="headerlink" title="获得JAXP中的DOM解析器"></a>获得JAXP中的DOM解析器</h6><p>•调用DocumentBuilderFactory.newInstance（）方法得到创建DOM解析器的工厂。</p><p>•调用工厂对像的newDocumentBuilder方法得到DOM解析器对象</p><p>•调用DOM解析器对象的parse()方法解析XML文档，得到代表整个文档的Document对象，进行可以利用DOM特性对整个XML文档进行操作 </p><h6 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h6><p>DOM4j中，获得Document对象的方式有三种：    </p><p>1、读取XML文件，获得document对象</p><p>– SAXReader  reader =new   SAXReader();</p><p>– Document  document = reader.read(new File(“input.xml”));</p><p>2、解析XML形式的文本，得到document对象</p><p>– String  text  =”<members></members>“</p><p>– Document  document=DocumentHelper.parseText(text);</p><p>3、主动创建document对象</p><p>– Document document  =DocumentHelper.createDocument();</p><p>– //创建根节点</p><p>– Element root  = document.addElement(“members”);        </p><h6 id="节点对象（nade）"><a href="#节点对象（nade）" class="headerlink" title="节点对象（nade）"></a>节点对象（nade）</h6><p>1、获取文档的根节点</p><p>–Element root =document.getRootElement();–</p><p>2、取得某个节点的子节点</p><p>–Element element = node.element(“书名”);</p><p>3、取得节点的文字</p><p>–String text =node.getText();</p><p>4、取得某节点下所有名为”member”的子节点，并进行遍历。</p><p>–List nodes =rootElm.elements(“member”);</p><p>–for(Iterator it=nodes.iterator();it.hasNext();){</p><p>Element elm =(Element)it.next();    }</p><p>5、对某节点下的所有子节点进行遍历</p><p>–for(Iterator it = root.elementIterator();it.hasNext();){</p><p>lement element =(Element)it.next();   }</p><p>6、在某节点下添加子节点</p><p>–Element ageElm = newMemberElm.addElement(“age”);</p><p>7、设置节点文字</p><p>–element.setText(“29”);</p><p>8、删除某节点</p><p>//childElm是待删除的节点，parentElm是其父节点</p><p>–parentElm.remove(childElm);</p><p>9、添加一个CDATA节点</p><p>–Element contentElm = infoElm.addElement(“content”);</p><p>–contentElm.addCDATA(diary.getContent());</p><h6 id="节点对象属性"><a href="#节点对象属性" class="headerlink" title="节点对象属性"></a>节点对象属性</h6><p>1、取得某节点下的某属性</p><p>–Element root = document.getRootElement();</p><p>–Attribute attribute = root.attribute(“size”);</p><p>2、取得属性的文字</p><p>–String text = attribute.getText();</p><p>3、删除某属性</p><p>–Attribute attribute = root.attribute(“size”);</p><p>-root.remove(attribute);</p><p>4、遍历某节点的所有属性</p><p>–Element root = document.getRootElement();</p><p>–for(Iterator it=root.attributeIterator();it.hasNext();){</p><p>Attribute attribute =(Attribute)it.next();</p><p>String text =attribute.getText();</p><p>System.out.println(Text);     }</p><p>5、设置某节点的属性和文字</p><p>–newMemberElm.addAttribute(“name”,”sitinspring”);</p><p>6、设置属性的文字</p><p>–Attribute attribute = root.attribute(“name”);</p><p>–attribute.setText(“sitinspring”);</p><h3 id="XML-Schema"><a href="#XML-Schema" class="headerlink" title="XML Schema"></a>XML Schema</h3><p>•XML Schema也是一种用于定义和描述XML文档结构与内容的模式语言，其出现时为了克服DTD的局限性</p><p><em>XML Schema VS DTD</em>:</p><p>1、XML Schema符合XML语法结构</p><p>2、DOM、SAX等XML API很容易解析出XML Schema文档中的内容</p><p>3、XML Schema对名称空间支持的非常好</p><p>4、XML Schema比XML DTD支持更多的数据类型，并支持用户自定义新的数据类型</p><p>5、XML Schema定义约束能力非常强大，可以对XML实例文档做出细致的语义限制</p><p>6、XML Schema 不能像DTD一样定义实体，比DTD更复杂，但Xml Schema现在已是w3c组织的标准，它正逐步取代DTD</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">book.xsd文件</span><br><span class="line"><span class="meta">&lt;?xml version="1.0"encoding="UTF-8"？&gt;</span></span><br><span class="line"><span class="meta">&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"</span></span><br><span class="line"><span class="meta">    //标准的名称空间</span></span><br><span class="line"><span class="meta">    targetNamespace="http://www.itcast.cn"</span></span><br><span class="line"><span class="meta">    //将该schema文档绑定到http:/www.itcast.cn名称空间</span></span><br><span class="line"><span class="meta">    elementFormDefault="qualified"&gt;</span></span><br><span class="line"><span class="meta">&lt;xs:element name='书架’〉</span></span><br><span class="line"><span class="meta">〈xs:complexType&gt;</span></span><br><span class="line"><span class="meta">&lt;xs:sequence maxOccurs='unbounded'〉</span></span><br><span class="line"><span class="meta">&lt;xs:element name='书’〉</span></span><br><span class="line"><span class="meta">〈xs:complexType〉</span></span><br><span class="line"><span class="meta">&lt;xs:sequence&gt;</span></span><br><span class="line"><span class="meta">&lt;xs:element name='书名’type='xs:string'/&gt;&lt;xs:element name='作者’type='xs:string'/〉〈xs:element name='售价’type='xs:string'/&gt;</span></span><br><span class="line"><span class="meta">〈/xs:sequence〉</span></span><br><span class="line"><span class="meta">〈/xs:complexType&gt;</span></span><br><span class="line"><span class="meta">&lt;/xs:element〉</span></span><br><span class="line"><span class="meta">&lt;/xs:sequence&gt;</span></span><br><span class="line"><span class="meta">&lt;/xs:complexType〉</span></span><br><span class="line"><span class="meta">&lt;/xs:element〉</span></span><br><span class="line"><span class="meta">&lt;/xs:schema&gt;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&lt;Qxml version="1.0"encoding-"UTF-8"？&gt;</span></span><br><span class="line"><span class="meta">&lt;itcast：书架xmlns:itcast="http://www.itcast.cn"</span></span><br><span class="line"><span class="meta">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="meta">xsi:schemalocation=“http://www.itcast.cn book.xsd"&gt;</span></span><br><span class="line"><span class="meta">&lt;itcast：书&gt;</span></span><br><span class="line"><span class="meta">&lt;itcast：书名）JavaScript网页开发&lt;/itcast：书名）</span></span><br><span class="line"><span class="meta">&lt;itcast：作者〉张孝祥&lt;/itcast：作者》</span></span><br><span class="line"><span class="meta">〈itcast：售价〉28.00元&lt;/itcast：售价〉</span></span><br><span class="line"><span class="meta">&lt;/itcast：书&gt;</span></span><br><span class="line"><span class="meta">〈/itcast：书架〉</span></span><br></pre></td></tr></table></figure><h6 id="名称空间的概念"><a href="#名称空间的概念" class="headerlink" title="名称空间的概念"></a>名称空间的概念</h6><p>  在XML Schema中，每个约束模式文档都可以被赋予一个唯一的名称空间，名称空间用一个唯一的URI来表示。在Xml文件中书写标签时，可以通过名称空间声明，来声明当前编写的标签来自哪个Schema约束文档。</p><p>例：</p><p>&lt;comhh :书架  xmlns:comhh=”http://……”&gt;</p><p><a href="itcast:书" target="_blank" rel="noopener">itcast:书</a>……&lt;/itcast:书&gt;</p><p>&lt;/comhh:书架&gt;</p><p>此处用comhh来指向声明的名称，以便于后面对名称空间的引用</p><p><strong>注意</strong>：名称空间的 名字语法容易让人混淆，尽管以http://开始，哪个URL:根本没有指向任何文件，只是一个分配的名字</p><h6 id="使用名称空间引入Schema"><a href="#使用名称空间引入Schema" class="headerlink" title="使用名称空间引入Schema"></a>使用名称空间引入Schema</h6><p>为了在一个XML文档中声明它所遵循的Schema文件的具体位置，通常需要在Xml文档中的根节点中使用schemaLocation属性来指定，例如：</p><p>•&lt;comhh:书架 xmlns:comhh=”http://……”–xmlns:xsi=”http:……”   xsi：schemaLocation=”…….xsd”&gt;</p><p>schemaLocation此属性有两个值。第一个值是需要使用的命名空间。第二个值是供命名空间使用的XML  Schema的位置，两者之间用空格分隔。</p><p><strong>注意</strong>，在使用schemaLocation属性时，也需要指定该属性来自哪里</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">使用名称空间引入多个XML Schema文档</span><br><span class="line"><span class="tag">&lt;<span class="name">？xml</span> <span class="attr">version</span>=<span class="string">"1.0"</span><span class="attr">encoding</span>=<span class="string">"UTF-8"</span>？&gt;</span></span><br><span class="line">〈书架xmlns="http://www.it315.org/xmlbook/schema"</span><br><span class="line">xmlns:demo="http://www.it315.org/demo/schema"</span><br><span class="line">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">xsi:schemalocation="http://www.it315.org/xmlbook/schema http://www.it315.org/xmlbook.xsdhttp://www.it315.org/demo/schema http://www.it315.org/demo.xsd"&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">〈书名&gt;JavaScript网页开发<span class="tag">&lt;/<span class="name">书名〉</span></span></span><br><span class="line">&lt;作者〉张孝祥&lt;/作者〉</span><br><span class="line"><span class="tag">&lt;<span class="name">售价demo：币种=”人民币”</span>&gt;</span>28.00元<span class="tag">&lt;/<span class="name">售价〉</span></span></span><br><span class="line">&lt;/书&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">书架〉</span></span></span><br><span class="line"><span class="tag">    </span></span><br><span class="line"><span class="tag">不使用名称空间引入<span class="attr">XML</span> <span class="attr">Schema</span>文档 </span></span><br><span class="line">    &lt;？xml version="1.0"encoding="UTF-8"？&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">书架xmlns:xsi="http:</span>//<span class="attr">www.w3.org</span>/<span class="attr">2001</span>/<span class="attr">XMLSchema-instance</span>"</span></span><br><span class="line"><span class="tag"><span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"xmlbook.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">书名</span>&gt;</span>JavaScript网页开发<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">作者</span>&gt;</span>张孝祥<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">售价</span>&gt;</span>28.00元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">书架</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XML&quot;&gt;&lt;a href=&quot;#XML&quot; class=&quot;headerlink&quot; title=&quot;XML&quot;&gt;&lt;/a&gt;XML&lt;/h3&gt;&lt;p&gt;  xml是指可扩展标记语言（eXtensible  Markup Language）它是一种标记语言，很类似HTML。它是一种标记
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Stream流</title>
    <link href="http://yoursite.com/all/Stream%E6%B5%81/"/>
    <id>http://yoursite.com/all/Stream流/</id>
    <published>2019-08-01T06:50:32.000Z</published>
    <updated>2019-08-01T14:10:58.146Z</updated>
    
    <content type="html"><![CDATA[<p>Stream流</p><p>   示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamFilter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">list.add(<span class="string">"周芷若"</span>);</span><br><span class="line">list.add(<span class="string">"赵敏"</span>);</span><br><span class="line">list.add(<span class="string">"张强"</span>);</span><br><span class="line">list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">list.stream().filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>))</span><br><span class="line">.filter(s ‐&gt; s.length() == <span class="number">3</span>)</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据Collection获取流"><a href="#根据Collection获取流" class="headerlink" title="根据Collection获取流"></a>根据Collection获取流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetStream</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Stream&lt;String&gt; stream2 = set.stream();</span><br><span class="line">Vector&lt;String&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Stream&lt;String&gt; stream3 = vector.stream();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据Map获取流"><a href="#根据Map获取流" class="headerlink" title="根据Map获取流"></a>根据Map获取流</h4><p>  java.util.Map 接口不是 Collection 的子接口，且其K-V数据结构不符合流元素的单一特征，所以获取对应的流需要分key、value或entry等情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetStream</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Stream&lt;String&gt; keyStream = map.keySet().stream();</span><br><span class="line">Stream&lt;String&gt; valueStream = map.values().stream();</span><br><span class="line">Stream&lt;Map.Entry&lt;String, String&gt;&gt; entryStream = map.entrySet().stream();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据数组获取流"><a href="#根据数组获取流" class="headerlink" title="根据数组获取流"></a>根据数组获取流</h4><p>  如果使用的不是集合或映射而是数组，由于数组对象不可能添加默认方法，所以 Stream 接口中提供了静态方法of </p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetStream</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] array = &#123; <span class="string">"张无忌"</span>, <span class="string">"张翠山"</span>, <span class="string">"张三丰"</span>, <span class="string">"张一元"</span> &#125;;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(array);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>  <em>终结方法</em>：返回值类型不再是 Stream 接口自身类型的方法，因此不再支持类似 StringBuilder 那样的链式调用。本小节中，终结方法包括 count 和 forEach 方法。<br>  <em>非终结方法</em>：返回值类型仍然是 Stream 接口自身类型的方法，因此支持链式调用。（除了终结方法外，其余方法均为非终结方法。）</p><p><strong>过滤：filter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span>;</span><br><span class="line"><span class="comment">//该接口接收一个 Predicate 函数式接口参数（可以是一个Lambda或方法引用）作为筛选条件。</span></span><br></pre></td></tr></table></figure><p>Stream流中的filter方法基本使用的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07StreamFilter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">Stream&lt;String&gt; result = original.filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>));</span><br><span class="line">   <span class="comment">//在这里通过Lambda表达式来指定了筛选的条件：必须姓张。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="统计个数：count"><a href="#统计个数：count" class="headerlink" title="统计个数：count"></a>统计个数：count</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//该方法返回一个long值代表元素个数（不再像旧集合那样是int值）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基本使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09StreamCount</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">Stream&lt;String&gt; result = original.filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>));</span><br><span class="line">System.out.println(result.count()); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="取用前几个：limit"><a href="#取用前几个：limit" class="headerlink" title="取用前几个：limit"></a>取用前几个：limit</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">limit</span><span class="params">(<span class="keyword">long</span> maxSize)</span></span>;</span><br><span class="line"><span class="comment">//limit 方法可以对流进行截取，只取用前n个。</span></span><br><span class="line"><span class="comment">//参数是一个long型，如果集合当前长度大于参数则进行截取；否则不进行操作</span></span><br><span class="line"></span><br><span class="line">基本使用</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10StreamLimit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">Stream&lt;String&gt; result = original.limit(<span class="number">2</span>);</span><br><span class="line">System.out.println(result.count()); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="跳过前几个：skip"><a href="#跳过前几个：skip" class="headerlink" title="跳过前几个：skip"></a>跳过前几个：skip</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span></span>;</span><br><span class="line"><span class="comment">//使用获取一个截取之后的新流</span></span><br><span class="line"><span class="comment">//如果流的当前长度大于n，则跳过前n个；否则将会得到一个长度为0的空流。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基本使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11StreamSkip</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">Stream&lt;String&gt; result = original.skip(<span class="number">2</span>);</span><br><span class="line">System.out.println(result.count()); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="映射：map"><a href="#映射：map" class="headerlink" title="映射：map"></a>映射：map</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span></span>;</span><br><span class="line"><span class="comment">//该接口需要一个 Function 函数式接口参数，可以将当前流中的T类型数据转换为另一种R类型的流。</span></span><br></pre></td></tr></table></figure><h6 id="组合：concat"><a href="#组合：concat" class="headerlink" title="组合：concat"></a>组合：concat</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Stream&lt;T&gt; <span class="title">concat</span><span class="params">(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="comment">//基本使用方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class Demo12StreamConcat </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; streamA = Stream.of(<span class="string">"张无忌"</span>);</span><br><span class="line">Stream&lt;String&gt; streamB = Stream.of(<span class="string">"张翠山"</span>);</span><br><span class="line">Stream&lt;String&gt; result = Stream.concat(streamA, streamB);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="逐一处理：forEach"><a href="#逐一处理：forEach" class="headerlink" title="逐一处理：forEach"></a>逐一处理：forEach</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br><span class="line"><span class="comment">//该方法接收一个 Consumer 接口函数，会将每一个流元素交给该函数进行处理。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo12StreamForEach</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="联系：Stream方式集合元素处理"><a href="#联系：Stream方式集合元素处理" class="headerlink" title="联系：Stream方式集合元素处理"></a>联系：Stream方式集合元素处理</h6><p>题目：将上一题当中的传统for循环写法更换为Stream流式处理方式。两个集合的初始内容不变， Person 类的定义也不变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoStreamNames</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">List&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 第一个队伍只要名字为3个字的成员姓名；</span></span><br><span class="line"><span class="comment">// 第一个队伍筛选之后只要前3个人；</span></span><br><span class="line">Stream&lt;String&gt; streamOne = one.stream().filter(s ‐&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 第二个队伍只要姓张的成员姓名；</span></span><br><span class="line"><span class="comment">// 第二个队伍筛选之后不要前2个人；</span></span><br><span class="line">Stream&lt;String&gt; streamTwo = two.stream().filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>)).skip(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 将两个队伍合并为一个队伍；</span></span><br><span class="line"><span class="comment">// 根据姓名创建Person对象；</span></span><br><span class="line"><span class="comment">// 打印整个队伍的Person对象信息。</span></span><br><span class="line">Stream.concat(streamOne, streamTwo).map(Person::<span class="keyword">new</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="收集Stream结果"><a href="#收集Stream结果" class="headerlink" title="收集Stream结果"></a>收集Stream结果</h3><p>  Stream流提供 collect 方法，其参数需要一个 java.util.stream.Collector&lt;T,A, R&gt; 接口对象来指定收集到哪种  集合中。java.util.stream.Collectors 类提供一些方法，可以作为 Collector 接口的实例：<br>public static <t> Collector&lt;T, ?, List<t>&gt; toList() ：转换为 List 集合。<br>public static <t> Collector&lt;T, ?, Set<t>&gt; toSet() ：转换为 Set 集合。</t></t></t></t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo15StreamCollect</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"10"</span>, <span class="string">"20"</span>, <span class="string">"30"</span>, <span class="string">"40"</span>, <span class="string">"50"</span>);</span><br><span class="line">List&lt;String&gt; list = stream.collect(Collectors.toList());</span><br><span class="line">Set&lt;String&gt; set = stream.collect(Collectors.toSet());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="收集到数组中"><a href="#收集到数组中" class="headerlink" title="收集到数组中"></a>收集到数组中</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Object[] toArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用如下：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo16StreamArray</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"10"</span>, <span class="string">"20"</span>, <span class="string">"30"</span>, <span class="string">"40"</span>, <span class="string">"50"</span>);</span><br><span class="line">Object[] objArray = stream.toArray();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="解决泛型数组问题"><a href="#解决泛型数组问题" class="headerlink" title="解决泛型数组问题"></a><strong><em>解决泛型数组问题</em></strong></h6><p>有了Lambda和方法引用之后，可以使用 toArray 方法的另一种重载形式传递一个 IntFunction&lt;A[]&gt; 的函数，继而从外面指定泛型参数。方法签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator);</span><br><span class="line"></span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo17StreamArray</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"10"</span>, <span class="string">"20"</span>, <span class="string">"30"</span>, <span class="string">"40"</span>, <span class="string">"50"</span>);</span><br><span class="line">String[] strArray = stream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  既然数组也是有构造器的，那么传递一个数组的构造器引用即可。</p><h6 id="练习：将数组元素加到集合中"><a href="#练习：将数组元素加到集合中" class="headerlink" title="练习：将数组元素加到集合中"></a>练习：将数组元素加到集合中</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">请通过Stream流的方式，将下面数组当中的元素添加（收集）到 List 集合当中：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoCollect</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] array = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">首先需要将数组转换成为流，然后再通过 collect 方法收集到 List 集合中：</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoCollect</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] array = &#123; <span class="string">"Java"</span>, <span class="string">"Groovy"</span>, <span class="string">"Scala"</span>, <span class="string">"Kotlin"</span> &#125;;</span><br><span class="line">List&lt;String&gt; list = Stream.of(array).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Stream流&lt;/p&gt;
&lt;p&gt;   示例：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>类和集合等</title>
    <link href="http://yoursite.com/all/%E7%B1%BB%E5%92%8C%E9%9B%86%E5%90%88%E7%AD%89/"/>
    <id>http://yoursite.com/all/类和集合等/</id>
    <published>2019-07-31T01:53:20.000Z</published>
    <updated>2019-08-01T06:20:07.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>  java.lang.Object类是java语言中的根类，即所有的类的父类。它描述的所有方法子类都可以使用。。在对象实例化的时候，最终找的父类就是Object。如果一个类没有特别指定父类，那么默认则继承自Object类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ </span>&#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//返回该对象的字符串表示。</span></span><br></pre></td></tr></table></figure><p>  toString方法返回该对象的字符串表示，其实该字符串内容就是对象的类型+@+内存地址值。由于toString方法返回的结果是内存地址，而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，因此也需要重写它。</p><h6 id="覆盖重写"><a href="#覆盖重写" class="headerlink" title="覆盖重写"></a>覆盖重写</h6><p>  如果不希望使用toString方法的默认行为，则可以对它进行覆盖重写。例如自定义的Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Person&#123;"</span> + <span class="string">"name='"</span> + name + <span class="string">'\''</span> + <span class="string">", age="</span> + age + <span class="string">'&#125;'</span>;</span><br><span class="line">  &#125; <span class="comment">// 省略构造器与Getter Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快捷键的使用 alt+insert；</p><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> ：</span></span><br><span class="line"><span class="function"><span class="comment">//指示其他某个对象是否与此对象“相等”</span></span></span><br></pre></td></tr></table></figure><h6 id="默认地址比较"><a href="#默认地址比较" class="headerlink" title="默认地址比较"></a>默认地址比较</h6><p>  如果没有覆盖重写equals方法，那么Object类中默认进行 == 运算符的对象地址比较，只要不是同一个对象，结果必然为false</p><h6 id="对象内容比较"><a href="#对象内容比较" class="headerlink" title="对象内容比较"></a>对象内容比较</h6><p>  如果希望进行对象的内容比较，即所有或指定的部分成员变量相同就判定两个对象相同，则可以覆盖重写equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span>    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 如果对象地址一样，则认为相同</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == o)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 如果参数为空，或者类型信息不一样，则认为不同</span></span><br><span class="line"><span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 转换为当前类型</span></span><br><span class="line">Person person = (Person) o;</span><br><span class="line">  <span class="comment">// 要求基本类型相等，并且将引用类型java.util.Objects类的equals静态方法取用结果</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> age == person.age &amp;&amp;Objects.equals(name, person.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  快捷键：alt+insert 选择 equals() and hashCode() 进行自动代码生成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span></span>; </span><br><span class="line"><span class="comment">//判断两个对象是否相等</span></span><br></pre></td></tr></table></figure><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><p>   java.util.Date类，表示忒定的瞬间，精确到毫秒。</p><p>   public Date() ：分配Date对象并初始化此对象，以表示分配它的时间（精确到毫秒）。<br>   public Date(long date) ：分配Date对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即1970年1月1日00:00:00 GMT）以来的指定毫秒数</p><p>  使用无参构造，可以自动设置当前系统时间的毫秒时刻；指定long类型的构造参数，可以自定义毫秒时刻。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Date</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建日期对象，把当前的时间</span></span><br><span class="line">    </span><br><span class="line">System.out.println(<span class="keyword">new</span> Date()); </span><br><span class="line"><span class="comment">// Tue Jan 16 14:37:35 CST 2018</span></span><br><span class="line"><span class="comment">// 创建日期对象，把当前的毫秒值转成日期对象</span></span><br><span class="line">    </span><br><span class="line">System.out.println(<span class="keyword">new</span> Date(<span class="number">0L</span>)); </span><br><span class="line"><span class="comment">// Thu Jan 01 08:00:00 CST 1970</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//把日期对象转化成对应的时间毫米毫秒</span></span><br></pre></td></tr></table></figure><p>DateFormat类</p><p>   java.text.DateFormat是日期/时间格式化子类的抽象类，我们通过这个类可以帮我们完成如期和文本之间的转换，也就是可以在Date对象与String对象之间进行来回转换。</p><p>  格式化：按照指定的格式，从Date对象转换为String对象。<br>  解析：按照指定的格式，从String对象转换为Date对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">(String pattern)</span> </span>;</span><br><span class="line"><span class="comment">//用给定的模式和默认语言环境的日期格式符号构造SimpleDateFormat。</span></span><br></pre></td></tr></table></figure><p>格式规则：</p><p>y——年、M——月、d——日、H——时、m——分、s——秒</p><p>创建SimpleDateFormat对象的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormat</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 对应的日期格式如：2018‐01‐16 15:06:38</span></span><br><span class="line">DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy‐MM‐dd HH:mm:ss"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DateFormat类的常用方法有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">(Date date)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//将Date对象格式化为字符串</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//将字符串解析为Date对象。</span></span></span><br></pre></td></tr></table></figure><p>format方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把Date对象转换成String</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">// 创建日期格式化对象,在获取格式化对象时可以指定风格</span></span><br><span class="line">DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line">String str = df.format(date);</span><br><span class="line">System.out.println(str); <span class="comment">// 2008年1月23日</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>parst方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把String转换成Date对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line">String str = <span class="string">"2018年12月11日"</span>;</span><br><span class="line">Date date = df.parse(str);</span><br><span class="line">System.out.println(date); <span class="comment">// Tue Dec 11 00:00:00 CST 2018</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><p>日历类</p><p>get/set方法：get方法用来获取指定字段的值，set方法用来设置指定字段的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarUtil</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建Calendar对象</span></span><br><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line"><span class="comment">// 设置年</span></span><br><span class="line"><span class="keyword">int</span> year = cal.get(Calendar.YEAR);</span><br><span class="line"><span class="comment">// 设置月</span></span><br><span class="line"><span class="keyword">int</span> month = cal.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 设置日</span></span><br><span class="line"><span class="keyword">int</span> dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line">cal.set(Calendar.YEAR, <span class="number">2020</span>);</span><br><span class="line">System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>); <span class="comment">// 2020年1月17日</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="getTime方法"><a href="#getTime方法" class="headerlink" title="getTime方法"></a>getTime方法</h6><p>Calendar中的getTime方法并不是获取毫秒时刻，而是拿到对应的Date对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i</span><br><span class="line">mport java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09CalendarMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line">Date date = cal.getTime();</span><br><span class="line">System.out.println(date); <span class="comment">// Tue Jan 16 16:03:09 CST 2018</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="system类"><a href="#system类" class="headerlink" title="system类"></a>system类</h2><p>   java.lang.System   类中提供了大量的静态方法，可以获取与系统相关的信息或系统级操作.</p><p>currentTimeMillis方法</p><p>验证for循环打印数字1-9999所需要使用的时间（毫秒）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">System</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125; l</span><br><span class="line">ong end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"共耗时毫秒："</span> + (end ‐ start));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="arraycopy方法"><a href="#arraycopy方法" class="headerlink" title="arraycopy方法"></a>arraycopy方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span> </span></span><br><span class="line"><span class="function">    <span class="comment">//将数组中指定的数据拷贝到另一个数组中。</span></span></span><br></pre></td></tr></table></figure><p>  将src数组中前3个元素，复制到dest数组的前3个位置上复制元素前：src数组元素[1,2,3,4,5]，dest数组元素[6,7,8,9,10]复制元素后：src数组元素[1,2,3,4,5]，dest数组元素[1,2,3,9,10]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11SystemArrayCopy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] src = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] dest = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">System.arraycopy( src, <span class="number">0</span>, dest, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">/*代码运行后：两个数组中的元素发生了变化</span></span><br><span class="line"><span class="comment">src数组元素[1,2,3,4,5]</span></span><br><span class="line"><span class="comment">dest数组元素[1,2,3,9,10]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StringBulider类"><a href="#StringBulider类" class="headerlink" title="StringBulider类"></a>StringBulider类</h2><p>  由于String类的对象内容不可改变，所以每当进行字符串拼接时，总是会在内存中创建一个新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s = <span class="string">"Hello"</span>;</span><br><span class="line">s += <span class="string">"World"</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h2><p> 集合是java中提供的一种容器，可以用来存储多个数据。</p><p>  <em>集合和数组既然都是容器，它们有啥区别呢？</em><br>  数组的长度是固定的。集合的长度是可变的。数组中存储的是同一类型的元素，可以存储基本数据类型值。集合存储的都是对象。而且对象的类型可以不一致。在开发中一般当对象多的时候，使用集合进行存储。</p><p>  集合按照其存储结构可以分为两大类：</p><p>  分别是单列集合 java.util.Collection 和双列集合 java.util.Map</p><p>collection常用功能</p><p>public boolean add(E e) ： 把给定的对象添加到当前集合中 。<br>public void clear() :清空集合中所有的元素。<br>boolean remove(E e) : 把给定的对象在当前集合中删除。<br>boolean contains(E e) : 判断当前集合中是否包含给定的对象。<br>public boolean isEmpty() : 判断当前集合是否为空。<br>public int size() : 返回集合中元素的个数。<br>public Object[] toArray() : 把集合中的元素，存储到数组中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Collection</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建集合对象</span></span><br><span class="line"><span class="comment">//使用多态形式</span></span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line"><span class="comment">// 添加功能 boolean add(String s)</span></span><br><span class="line">coll.add(<span class="string">"小李广"</span>);</span><br><span class="line">coll.add(<span class="string">"扫地僧"</span>);</span><br><span class="line">coll.add(<span class="string">"石破天"</span>);</span><br><span class="line">System.out.println(coll);</span><br><span class="line"><span class="comment">// boolean contains(E e) 判断o是否在集合中存在</span></span><br><span class="line">System.out.println(<span class="string">"判断 扫地僧 是否在集合中"</span>+coll.contains(<span class="string">"扫地僧"</span>));</span><br><span class="line"><span class="comment">//boolean remove(E e) 删除在集合中的o元素</span></span><br><span class="line">System.out.println(<span class="string">"删除石破天："</span>+coll.remove(<span class="string">"石破天"</span>));</span><br><span class="line">System.out.println(<span class="string">"操作之后集合中元素:"</span>+coll);</span><br><span class="line"><span class="comment">// size() 集合中有几个元素</span></span><br><span class="line">System.out.println(<span class="string">"集合中有"</span>+coll.size()+<span class="string">"个元素"</span>);</span><br><span class="line"><span class="comment">// Object[] toArray()转换成一个Object数组</span></span><br><span class="line">Object[] objects = coll.toArray();</span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">System.out.println(objects[i]);</span><br><span class="line">&#125; /</span><br><span class="line">/ <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> 清空集合</span></span><br><span class="line"><span class="function">coll.<span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">System.out.println(<span class="string">"集合中内容为："</span>+coll);</span><br><span class="line"><span class="comment">// boolean isEmpty() 判断是否为空</span></span><br><span class="line">System.out.println(coll.isEmpty());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Iterator迭代器</p><p>  <strong>迭代</strong>：即Collection集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</p><p><em>Iterator接口的常用方法如下：</em><br>public E next() :返回迭代的下一个元素。<br>public boolean hasNext() :如果仍有元素可以迭代，则返回 true。</p><p>例题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 使用多态方式 创建对象</span></span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">// 添加元素到集合</span></span><br><span class="line">coll.add(<span class="string">"串串星人"</span>);</span><br><span class="line">coll.add(<span class="string">"吐槽星人"</span>);</span><br><span class="line">coll.add(<span class="string">"汪星人"</span>);</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="comment">//使用迭代器 遍历 每个集合对象都有自己的迭代器</span></span><br><span class="line">Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line"><span class="comment">// 泛型指的是 迭代出 元素的数据类型</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123; <span class="comment">//判断是否有迭代元素</span></span><br><span class="line">String s = it.next();<span class="comment">//获取迭代出的元素</span></span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>迭代器的实现原理：</em></p><p>  当遍历集合时，首先通过调用t集合的iterator()方法获得迭代器对象，然后使用hashNext()方法判断集合中是否存在下一个元素，如果存在，则调用next()方法将元素取出，否则说明已到达了集合末尾，停止遍历元素。</p><p><em>迭代集合元素：</em></p><p>1.指针当前位置判断hasNext()为true</p><p>2.执行next()获取元素，移动指针来到下一个元素之前</p><p>  在调用Iterator的next方法之前，迭代器的索引位于第一个元素之前，不指向任何元素，当第一次调用迭代器的next方法后，迭代器的索引会向后移动一位，指向第一个元素并将该元素返回，当再次调用next方法时，迭代器的索引会指向第二个元素并将该元素返回，依此类推，直到hasNext方法返回false，表示到达了集合的末尾，终止对元素的遍历。</p><h6 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h6><p>遍历数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素的数据类型 变量 : Collection集合or数组)&#123;</span><br><span class="line"><span class="comment">//写操作代码</span></span><br><span class="line">&#125;<span class="comment">//格式</span></span><br><span class="line"></span><br><span class="line">第一种：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBForDemo1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">87</span>&#125;;</span><br><span class="line"><span class="comment">//使用增强for遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a : arr)&#123;<span class="comment">//a代表数组中的每个元素</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125; Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">coll.add(<span class="string">"小河神"</span>);</span><br><span class="line">coll.add(<span class="string">"老河神"</span>);</span><br><span class="line">coll.add(<span class="string">"神婆"</span>);</span><br><span class="line"><span class="keyword">for</span>(String s :coll)&#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBFor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">coll.add(<span class="string">"小河神"</span>);</span><br><span class="line">coll.add(<span class="string">"老河神"</span>);</span><br><span class="line">coll.add(<span class="string">"神婆"</span>);</span><br><span class="line"><span class="comment">//使用增强for遍历</span></span><br><span class="line"><span class="keyword">for</span>(String s :coll)&#123;<span class="comment">//接收变量s代表 代表被遍历到的集合元素</span></span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p><strong>定义：</strong>可以在类或方法中预支地使用未知的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;代表泛型的变量&gt; </span>&#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(String e)</span></span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123; &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>含有泛型的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数)&#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericMethod</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> &lt;MVP&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">System.out.println(mvp.getClass());</span><br><span class="line">&#125; p</span><br><span class="line">ublic &lt;MVP&gt; <span class="function">MVP <span class="title">show2</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mvp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型的接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span>接口名&lt;代表泛型的变量&gt; </span>&#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> E <span class="title">getE</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImp1</span> <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 省略...</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="综合案例："><a href="#综合案例：" class="headerlink" title="综合案例："></a>综合案例：</h2><p>  按照斗地主的规则，完成洗牌发牌的动作。 具体规则：<br>  使用54张牌打乱顺序,三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</p><p>  准备牌：牌可以设计为一个ArrayList,每个字符串为一张牌。 每张牌由花色数字两部分组成，我们可以使用花色集合与数字集合嵌套迭代完成每张牌的组装。 牌由Collections类的shuffle方法进行随机排序。</p><p>  发牌：将每个人以及底牌设计为ArrayList,将最后3张牌直接存放于底牌，剩余牌通过对3取模依次发牌。</p><p>  看牌：直接打印每个集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poker</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 1: 准备牌操作</span></span><br><span class="line"><span class="comment">*/</span>*/</span><br><span class="line"><span class="comment">//1.1 创建牌盒 将来存储牌面的</span></span><br><span class="line">ArrayList&lt;String&gt; pokerBox = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//1.2 创建花色集合</span></span><br><span class="line">ArrayList&lt;String&gt; colors = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//1.3 创建数字集合</span></span><br><span class="line">ArrayList&lt;String&gt; numbers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//1.4 分别给花色 以及 数字集合添加元素</span></span><br><span class="line">colors.add(<span class="string">"♥"</span>);</span><br><span class="line">colors.add(<span class="string">"♦"</span>);</span><br><span class="line">colors.add(<span class="string">"♠"</span>);</span><br><span class="line">colors.add(<span class="string">"♣"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">numbers.add(i+<span class="string">""</span>);</span><br><span class="line">&#125; n</span><br><span class="line">umbers.add(<span class="string">"J"</span>);</span><br><span class="line">numbers.add(<span class="string">"Q"</span>);</span><br><span class="line">numbers.add(<span class="string">"K"</span>);</span><br><span class="line">numbers.add(<span class="string">"A"</span>);</span><br><span class="line"><span class="comment">//1.5 创造牌 拼接牌操作</span></span><br><span class="line"><span class="comment">// 拿出每一个花色 然后跟每一个数字 进行结合 存储到牌盒中</span></span><br><span class="line"><span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line"><span class="comment">//color每一个花色</span></span><br><span class="line"><span class="comment">//遍历数字集合</span></span><br><span class="line"><span class="keyword">for</span>(String number : numbers)&#123;</span><br><span class="line"><span class="comment">//结合</span></span><br><span class="line">String card = color+number;</span><br><span class="line"><span class="comment">//存储到牌盒中</span></span><br><span class="line">pokerBox.add(card);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.6大王小王</span></span><br><span class="line">pokerBox.add(<span class="string">"小☺"</span>);</span><br><span class="line">pokerBox.add(<span class="string">"大☠"</span>);</span><br><span class="line"><span class="comment">// System.out.println(pokerBox);</span></span><br><span class="line"><span class="comment">//洗牌 是不是就是将 牌盒中 牌的索引打乱</span></span><br><span class="line"><span class="comment">// Collections类 工具类 都是 静态方法</span></span><br><span class="line"><span class="comment">// shuffer方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* static void shuffle(List&lt;?&gt; list)</span></span><br><span class="line"><span class="comment">* 使用默认随机源对指定列表进行置换。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//2:洗牌</span></span><br><span class="line">Collections.shuffle(pokerBox);</span><br><span class="line"><span class="comment">//3 发牌</span></span><br><span class="line"><span class="comment">//3.1 创建 三个 玩家集合 创建一个底牌集合</span></span><br><span class="line">ArrayList&lt;String&gt; player1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">ArrayList&lt;String&gt; player2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">ArrayList&lt;String&gt; player3 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">ArrayList&lt;String&gt; dipai = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//遍历 牌盒 必须知道索引</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;pokerBox.size();i++)&#123;</span><br><span class="line"><span class="comment">//获取 牌面</span></span><br><span class="line">String card = pokerBox.get(i);</span><br><span class="line"><span class="comment">//留出三张底牌 存到 底牌集合中</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">51</span>)&#123;<span class="comment">//存到底牌集合中</span></span><br><span class="line">dipai.add(card);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//玩家1 %3 ==0</span></span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">player1.add(card);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;<span class="comment">//玩家2</span></span><br><span class="line">player2.add(card);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//玩家3</span></span><br><span class="line">player3.add(card);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; /</span><br><span class="line">/看看</span><br><span class="line">System.out.println(<span class="string">"令狐冲："</span>+player1);</span><br><span class="line">System.out.println(<span class="string">"田伯光："</span>+player2);</span><br><span class="line">System.out.println(<span class="string">"绿竹翁："</span>+player3);</span><br><span class="line">System.out.println(<span class="string">"底牌："</span>+dipai);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Object类&quot;&gt;&lt;a href=&quot;#Object类&quot; class=&quot;headerlink&quot; title=&quot;Object类&quot;&gt;&lt;/a&gt;Object类&lt;/h2&gt;&lt;p&gt;  java.lang.Object类是java语言中的根类，即所有的类的父类。它描述的所有方法子类
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="http://yoursite.com/all/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/all/网络编程/</id>
    <published>2019-07-30T02:25:21.000Z</published>
    <updated>2019-07-30T11:56:40.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h3 id="软件结构："><a href="#软件结构：" class="headerlink" title="软件结构："></a>软件结构：</h3><p>  c/s结构：全称为Client/Server结构，是客户端和服务器的结构。常见程序有QQ、迅雷、各种市场上的播放器等软件。</p><p>  b/s结构：全称为Browser/Server结构，是指浏览器和服务器结构。常见有各种的市场上的浏览器如谷歌，火狐等。</p><p>  两种架构，都离不开网络的支持。网络编程，就是在一定的协议下，实现两台计算机的通信的程序。</p><h3 id="网络通信协议："><a href="#网络通信协议：" class="headerlink" title="网络通信协议："></a>网络通信协议：</h3><p>   定义：通信协议是对计算机必须遵守的规则，只有遵守这些规则，计算机之间才能进行通信。这就好比在道路中行驶的汽车一定要遵守交通规则一样，协议中对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守，最终完成数据交换。</p><p>   TCP/IP协议：是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</p><p>  应用层：HTTP  FTP  TFTP  SMTP  SNMP  DNS</p><p>  传输层：TCP UDP</p><p>  网络层：ICMP IGMP   IP    ARP  RARP</p><p>  数据链路层  物理层： 由底层网络定义的协议</p><p>  TCP 协议是面向连接的通信协议，即传输数据之前在发送端和接受端建立逻辑连接，然后在传输数据，他提供了两台计算机之间可靠无差错的数据传输。</p><p>  三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。<br>  第一次握手，客户端向服务器端发出连接请求，等待服务器确认。<br>  第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。<br>  第三次握手，客户端再次向服务器端发送确认信息，确认连接。</p><h3 id="网络编程三要素："><a href="#网络编程三要素：" class="headerlink" title="网络编程三要素："></a>网络编程三要素：</h3><p>  协议：计算机网络通信必须遵守的规则。</p><p>IP地址：指互联网协议地址（Internet Protocol Address），俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。</p><p>IP地址分类：<br>  IPv4：是一个32位的二进制数，通常被分为4个字节，表示成a.b.c.d 的形式，例如192.168.65.100 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。<br>   IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。资料显示：全球IPv4地址在2011年2月分配完毕。</p><p>  本机IP：在控制台输入：ipconfig</p><p> 检查网络是否连通在控制台输入：ping 空格 IP 地址</p><p>  端口号：用两个字节表示的整数，它的取值范围是0<del>65535。其中，0</del>1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</p><p><strong>利用协议+IP地址+端口号 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</strong></p><h2 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h2><p>  定义：TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）与服务端（Server）。</p><p>两端通信的步骤：</p><ol><li>服务端程序，需要事先启动，等待客户端的连接。</li></ol><ol start="2"><li><p>客户端主动连接服务器端，连接成功才能通信。服务端不可以主动连接客户端。</p><p>(客户端：java.net.Socket 类表示。创建Socket对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</p><p>服务端：java.net.ServerSocket 类表示。创建ServerSocket对象，相当于开启一个服务，并等待客户端的连接。)</p></li></ol><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><p> Socket类：该类实现客户端套接字段（两台设备之间通讯的端点）。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Socket</span><span class="params">(String host,<span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//Socket client = new Socket("localhost",1111);</span></span></span><br></pre></td></tr></table></figure><p> 创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。 </p><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><p>public InputStream getInputStream() ： 返回此套接字的输入流。<br>  如果此Scoket具有相关联的通道，则生成的InputStream 的所有操作也关联该通道。<br>  关闭生成的InputStream也将关闭相关的Socket。<br>public OutputStream getOutputStream() ： 返回此套接字的输出流。<br>  如果此Scoket具有相关联的通道，则生成的OutputStream 的所有操作也关联该通道。<br>  关闭生成的OutputStream也将关闭相关的Socket。<br>public void close() ：关闭此套接字。<br>  一旦一个socket被关闭，它不可再使用。<br>  关闭此socket也将关闭相关的InputStream和OutputStream 。<br>public void shutdownOutput() ： 禁用此套接字的输出流。<br>  任何先前写出的数据将被发送，随后终止输出流。 </p><p> ServerSocket类：这个类实现了服务器套接字，该对象等待通过网络的请求。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServerSocket</span><span class="params">(<span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function">  <span class="comment">// ServerSocket server = new ServerSocket(1111);</span></span></span><br></pre></td></tr></table></figure><p>使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指<br>定的端口号上，参数port就是端口号。</p><h3 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h3><p>  public Socket accept() ：侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。该方法会一直阻塞直到建立连接。</p><h3 id="客户端向服务器发送数据"><a href="#客户端向服务器发送数据" class="headerlink" title="客户端向服务器发送数据"></a>客户端向服务器发送数据</h3><h4 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[]args）<span class="keyword">throws</span> IOException&#123;</span><br><span class="line">System.out.println（“服务端启动，等待连接<span class="string">"）；</span></span><br><span class="line"><span class="string">//1.创建Serversocket对象，绑定端口，开始等待连接</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">ServerSocket ss=new ServerSocket（1111）；</span></span><br><span class="line"><span class="string">//2.接收连接accept 方法，返回socket对象.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Socket server =ss.accept（）；</span></span><br><span class="line"><span class="string">//3.通过socket获取输入流</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">InputStream is=server.getInputstream（）；</span></span><br><span class="line"><span class="string">//4.一次性读取数据//4.1创建字节数组</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">byte[]b=new byte[1824]；</span></span><br><span class="line"><span class="string">//4.2据读取到字节数组中。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">int 1en=is.read（b）；</span></span><br><span class="line"><span class="string">//4.3解析数组，打印字符串信息</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">String msg=new String（b，e，1en）；System.out.print1n（msg）；</span></span><br><span class="line"><span class="string">//5.关闭资源.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">is.close（）；</span></span><br><span class="line"><span class="string">server.close（）；</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="客户端实现："><a href="#客户端实现：" class="headerlink" title="客户端实现："></a>客户端实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTCP</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[]args）<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">system.out.print1n（“客户端发送数据<span class="string">"）；</span></span><br><span class="line"><span class="string">//1.创建Socket（ip，port），确定连接到哪里.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Socket client=new Socket（"</span>localhost<span class="string">"，1111）；</span></span><br><span class="line"><span class="string">//2.获取流对象，输出流</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">OutputStream os=c1ient.getoutputStream（）；</span></span><br><span class="line"><span class="string">//3.写出数据。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">os.write（“你好么？tcp，我来了”.getBytes（））；</span></span><br><span class="line"><span class="string">//4.关闭资源。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">os.close（）；</span></span><br><span class="line"><span class="string">client.close（）；</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="服务器向客户端回写数据"><a href="#服务器向客户端回写数据" class="headerlink" title="服务器向客户端回写数据"></a>服务器向客户端回写数据</h3><h4 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[]args）<span class="keyword">throws</span> IOException&#123;</span><br><span class="line">system.out.println（“服务端启动，等待连接.…<span class="string">"）；</span></span><br><span class="line"><span class="string">/∥1.创建serversocket对象，绑定端口，开始等待连接ServerSocket ss=new Serversocket（6666）；</span></span><br><span class="line"><span class="string">//2.接收连接accept 方法，返回socket对象.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Socket server=ss.accept（）；    </span></span><br><span class="line"><span class="string">//3.通i过socket 获取输入流</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Inputstream is=server.getInputStream（）；    </span></span><br><span class="line"><span class="string">//4.一次性读取数据//4.1创建字节数组</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">byte[]b=new byte[1024]；</span></span><br><span class="line"><span class="string">//4.2据读取到字节数组中.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">int 1en=is.read（b）；</span></span><br><span class="line"><span class="string">//4.3解析数组，打印字符串信息</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">String msg=new String（b，e，1en）；System.out.print1n（msg）；</span></span><br><span class="line"><span class="string">//==ss=sa==sassm==回写数据-as===a=m=#sam=ms=#司===</span></span><br><span class="line"><span class="string">//s.通过socket获取输出流</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">OutputStream out=server.getoutputstream（）；</span></span><br><span class="line"><span class="string">//6.回写数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">out.write（“我很好，谢谢你”.getBytes（））；</span></span><br><span class="line"><span class="string">//7.关闭资源.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">out.close（）；</span></span><br><span class="line"><span class="string">is.close（）；</span></span><br><span class="line"><span class="string">server.close（）；</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTcP</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[]args）<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">System.out.println（“客户端发送数据<span class="string">"）；</span></span><br><span class="line"><span class="string">//1.创建Socket（ip，port），确定连接到哪里，</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Socket client=new Socket（"</span><span class="number">1</span>ocalhost<span class="string">"，6666）；    </span></span><br><span class="line"><span class="string">//2.通过Scoket，获取输出流对象</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Outputstream os=client.getoutputStream（）；</span></span><br><span class="line"><span class="string">//3.写出数据.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">os.write（“你好么？tcp，我来了"</span>.getBytes（））；</span><br><span class="line"><span class="comment">//=ssssacasnsans解析回写amwwascanacwsssawsacn的wa部</span></span><br><span class="line"><span class="comment">//4.通过Scoket，获取输入流对象</span></span><br><span class="line">    </span><br><span class="line">Inputstream in =client.getInputStream（）；</span><br><span class="line"><span class="comment">//5.读取数据数据</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">byte</span>[]b=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1</span>ee]；</span><br><span class="line"><span class="keyword">int</span> <span class="number">1</span>en=in.read（b）；</span><br><span class="line">System.out.println（<span class="keyword">new</span> String（b，e，<span class="number">1</span>en））；</span><br><span class="line"><span class="comment">//6.关闭资源，</span></span><br><span class="line">    </span><br><span class="line">in.close（）；</span><br><span class="line">os.close（）；</span><br><span class="line">client.close（）；</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络编程&quot;&gt;&lt;a href=&quot;#网络编程&quot; class=&quot;headerlink&quot; title=&quot;网络编程&quot;&gt;&lt;/a&gt;网络编程&lt;/h1&gt;&lt;h3 id=&quot;软件结构：&quot;&gt;&lt;a href=&quot;#软件结构：&quot; class=&quot;headerlink&quot; title=&quot;软件结构：&quot;&gt;
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>在windows系统 blog的构建</title>
    <link href="http://yoursite.com/all/%E5%9C%A8windows%E7%B3%BB%E7%BB%9F%20blog%E7%9A%84%E6%9E%84%E5%BB%BA/"/>
    <id>http://yoursite.com/all/在windows系统 blog的构建/</id>
    <published>2019-07-27T10:47:42.000Z</published>
    <updated>2019-07-30T02:26:45.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在windows系统-blog的构建"><a href="#在windows系统-blog的构建" class="headerlink" title="在windows系统 blog的构建"></a>在windows系统 blog的构建</h1><h2 id="1-下载的工具"><a href="#1-下载的工具" class="headerlink" title="1.下载的工具"></a>1.下载的工具</h2><p>  nodejs 、github一直默认就好。（安装时可以安装到其他盘中）</p><h2 id="2-安装git和nodejs"><a href="#2-安装git和nodejs" class="headerlink" title="2.安装git和nodejs"></a>2.安装git和nodejs</h2><p>  先安装好git和nodejs后。右键选着git bush。输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>   等出现相应的版本好是表示安装成功。</p><h2 id="3-开始安装hexo。"><a href="#3-开始安装hexo。" class="headerlink" title="3.开始安装hexo。"></a>3.开始安装hexo。</h2><p>​     先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>出现相应的版本号即为成功。</p><p>接着初始化hexo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>   打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。使用ctrl+c可以把服务关掉。</p><h2 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4.GitHub创建个人仓库"></a>4.GitHub创建个人仓库</h2><p> 首先，你先要有一个GitHub账户，去注册一个吧。</p><p> 注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p><p>  创建一个和你用户名相同的仓库，<a href="http://xn--yfr16an19l.github.io" target="_blank" rel="noopener">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href="http://xn--xxxx-4m5f354ev5p.github.io" target="_blank" rel="noopener">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p>  点击create repository</p><h2 id="5-生成ssh添加到Github"><a href="#5-生成ssh添加到Github" class="headerlink" title="5.生成ssh添加到Github"></a>5.生成ssh添加到Github</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">git config --global user.email <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>用上面这个语言检查。</p><p>在输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>然后在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git<span class="meta">@github</span>.com</span><br></pre></td></tr></table></figure><p>验证是否成功。</p><h2 id="6-把hexo部署到GitHub"><a href="#6-把hexo部署到GitHub" class="headerlink" title="6.把hexo部署到GitHub"></a>6.把hexo部署到GitHub</h2><p>  将hexo生成的文章部署到GitHub上，打开站点配置文件<code>_config.yml</code>，翻到最后，修改为YourgithubName就是你的GitHub账户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:<span class="comment">//github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>  这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>  其中 hexo clean清除了你之前生成的东西，也可以不加。<br>         hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>         hexo deploy 部署文章，可以用hexo d缩写</p><p>  当输入hexo d时需 要你输入username和password。</p><h2 id="7-改主题的风格"><a href="#7-改主题的风格" class="headerlink" title="7.改主题的风格"></a>7.改主题的风格</h2><p>  你可以去网站<a href="https://hexo.io/themes/改你博客的主题选着自己喜欢的。" target="_blank" rel="noopener">https://hexo.io/themes/改你博客的主题选着自己喜欢的。</a></p><h2 id="8-改后相关的操作"><a href="#8-改后相关的操作" class="headerlink" title="8.改后相关的操作"></a>8.改后相关的操作</h2><p>  如rss等，以及改相关的主页信息</p><h2 id="9-创建文章"><a href="#9-创建文章" class="headerlink" title="9.创建文章"></a>9.创建文章</h2><p>  输入 hexo new post ‘yourpost’ 创建你自己的文章。创建好后相关文件会在_psot文件夹下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在windows系统-blog的构建&quot;&gt;&lt;a href=&quot;#在windows系统-blog的构建&quot; class=&quot;headerlink&quot; title=&quot;在windows系统 blog的构建&quot;&gt;&lt;/a&gt;在windows系统 blog的构建&lt;/h1&gt;&lt;h2 id=&quot;1
      
    
    </summary>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/all/hello-world/"/>
    <id>http://yoursite.com/all/hello-world/</id>
    <published>2019-07-25T23:58:41.032Z</published>
    <updated>2019-07-25T23:58:41.032Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
