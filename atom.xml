<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wake Up</title>
  
  <subtitle>这是一个在学习中的人的blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-30T11:51:44.903Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>紫鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络编程</title>
    <link href="http://yoursite.com/all/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/all/网络编程/</id>
    <published>2019-07-30T02:25:21.000Z</published>
    <updated>2019-07-30T11:51:44.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h3 id="软件结构："><a href="#软件结构：" class="headerlink" title="软件结构："></a>软件结构：</h3><p>  c/s结构：全称为Client/Server结构，是客户端和服务器的结构。常见程序有QQ、迅雷、各种市场上的播放器等软件。</p><p>  b/s结构：全称为Browser/Server结构，是指浏览器和服务器结构。常见有各种的市场上的浏览器如谷歌，火狐等。</p><p>  两种架构，都离不开网络的支持。网络编程，就是在一定的协议下，实现两台计算机的通信的程序。</p><h3 id="网络通信协议："><a href="#网络通信协议：" class="headerlink" title="网络通信协议："></a>网络通信协议：</h3><p>   定义：通信协议是对计算机必须遵守的规则，只有遵守这些规则，计算机之间才能进行通信。这就好比在道路中行驶的汽车一定要遵守交通规则一样，协议中对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守，最终完成数据交换。</p><p>   TCP/IP协议：是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</p><p>  应用层：HTTP  FTP  TFTP  SMTP  SNMP  DNS</p><p>  传输层：TCP UDP</p><p>  网络层：ICMP IGMP   IP    ARP  RARP</p><p>  数据链路层  物理层： 由底层网络定义的协议</p><p>  TCP 协议是面向连接的通信协议，即传输数据之前在发送端和接受端建立逻辑连接，然后在传输数据，他提供了两台计算机之间可靠无差错的数据传输。</p><p>  三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。<br>  第一次握手，客户端向服务器端发出连接请求，等待服务器确认。<br>  第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。<br>  第三次握手，客户端再次向服务器端发送确认信息，确认连接。</p><h3 id="网络编程三要素："><a href="#网络编程三要素：" class="headerlink" title="网络编程三要素："></a>网络编程三要素：</h3><p>  协议：计算机网络通信必须遵守的规则。</p><p>IP地址：指互联网协议地址（Internet Protocol Address），俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。</p><p>IP地址分类：<br>  IPv4：是一个32位的二进制数，通常被分为4个字节，表示成a.b.c.d 的形式，例如192.168.65.100 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。<br>   IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。资料显示：全球IPv4地址在2011年2月分配完毕。</p><p>  本机IP：在控制台输入：ipconfig</p><p> 检查网络是否连通在控制台输入：ping 空格 IP 地址</p><p>  端口号：用两个字节表示的整数，它的取值范围是0<del>65535。其中，0</del>1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</p><p><strong>利用协议+IP地址+端口号 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</strong></p><h2 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h2><p>  定义：TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）与服务端（Server）。</p><p>两端通信的步骤：</p><ol><li>服务端程序，需要事先启动，等待客户端的连接。</li></ol><ol start="2"><li><p>客户端主动连接服务器端，连接成功才能通信。服务端不可以主动连接客户端。</p><p>(客户端：java.net.Socket 类表示。创建Socket对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</p><p>服务端：java.net.ServerSocket 类表示。创建ServerSocket对象，相当于开启一个服务，并等待客户端的连接。)</p></li></ol><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><p> Socket类：该类实现客户端套接字段（两台设备之间通讯的端点）。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Socket</span><span class="params">(String host,<span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//Socket client = new Socket("localhost",1111);</span></span></span><br></pre></td></tr></table></figure><p> 创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。 </p><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><p>public InputStream getInputStream() ： 返回此套接字的输入流。<br>  如果此Scoket具有相关联的通道，则生成的InputStream 的所有操作也关联该通道。<br>  关闭生成的InputStream也将关闭相关的Socket。<br>public OutputStream getOutputStream() ： 返回此套接字的输出流。<br>  如果此Scoket具有相关联的通道，则生成的OutputStream 的所有操作也关联该通道。<br>  关闭生成的OutputStream也将关闭相关的Socket。<br>public void close() ：关闭此套接字。<br>  一旦一个socket被关闭，它不可再使用。<br>  关闭此socket也将关闭相关的InputStream和OutputStream 。<br>public void shutdownOutput() ： 禁用此套接字的输出流。<br>  任何先前写出的数据将被发送，随后终止输出流。 </p><p> ServerSocket类：这个类实现了服务器套接字，该对象等待通过网络的请求。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServerSocket</span><span class="params">(<span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function">    ServerSocket server </span>= <span class="keyword">new</span> ServerSocket(<span class="number">1111</span>);</span><br></pre></td></tr></table></figure><p>使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指<br>定的端口号上，参数port就是端口号。</p><h3 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h3><p>  public Socket accept() ：侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。该方法会一直阻塞直到建立连接。</p><h3 id="客户端向服务器发送数据"><a href="#客户端向服务器发送数据" class="headerlink" title="客户端向服务器发送数据"></a>客户端向服务器发送数据</h3><h4 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[]args）<span class="keyword">throws</span> IOException&#123;</span><br><span class="line">System.out.println（“服务端启动，等待连接<span class="string">"）；</span></span><br><span class="line"><span class="string">//1.创建Serversocket对象，绑定端口，开始等待连接ServerSocket ss=new ServerSocket（1111）；</span></span><br><span class="line"><span class="string">//2.接收连接accept 方法，返回socket对象.</span></span><br><span class="line"><span class="string">Socket server =ss.accept（）；</span></span><br><span class="line"><span class="string">//3.通过socket获取输入流</span></span><br><span class="line"><span class="string">InputStream is=server.getInputstream（）；</span></span><br><span class="line"><span class="string">//4.一次性读取数据//4.1创建字节数组</span></span><br><span class="line"><span class="string">byte[]b=new byte[1824]；</span></span><br><span class="line"><span class="string">//4.2据读取到字节数组中。</span></span><br><span class="line"><span class="string">int 1en=is.read（b）；</span></span><br><span class="line"><span class="string">//4.3解析数组，打印字符串信息</span></span><br><span class="line"><span class="string">String msg=new String（b，e，1en）；System.out.print1n（msg）；</span></span><br><span class="line"><span class="string">//5.关闭资源.</span></span><br><span class="line"><span class="string">is.close（）；</span></span><br><span class="line"><span class="string">server.close（）；</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="客户端实现："><a href="#客户端实现：" class="headerlink" title="客户端实现："></a>客户端实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTCP</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[]args）<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">system.out.print1n（“客户端发送数据<span class="string">"）；</span></span><br><span class="line"><span class="string">//1.创建Socket（ip，port），确定连接到哪里.</span></span><br><span class="line"><span class="string">Socket client=new Socket（"</span>localhost<span class="string">"，1111）；</span></span><br><span class="line"><span class="string">//2.获取流对象，输出流</span></span><br><span class="line"><span class="string">OutputStream os=c1ient.getoutputStream（）；</span></span><br><span class="line"><span class="string">//3.写出数据。</span></span><br><span class="line"><span class="string">os.write（“你好么？tcp，我来了”.getBytes（））；</span></span><br><span class="line"><span class="string">//4.关闭资源。</span></span><br><span class="line"><span class="string">os.close（）；</span></span><br><span class="line"><span class="string">client.close（）；</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="服务器向客户端回写数据"><a href="#服务器向客户端回写数据" class="headerlink" title="服务器向客户端回写数据"></a>服务器向客户端回写数据</h3><h4 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[]args）<span class="keyword">throws</span> IOException&#123;</span><br><span class="line">system.out.println（“服务端启动，等待连接.…<span class="string">"）；</span></span><br><span class="line"><span class="string">/∥1.创建serversocket对象，绑定端口，开始等待连接ServerSocket ss=new Serversocket（6666）；</span></span><br><span class="line"><span class="string">//2.接收连接accept 方法，返回socket对象.</span></span><br><span class="line"><span class="string">Socket server=ss.accept（）；</span></span><br><span class="line"><span class="string">//3.通i过socket 获取输入流</span></span><br><span class="line"><span class="string">Inputstream is=server.getInputStream（）；</span></span><br><span class="line"><span class="string">//4.一次性读取数据//4.1创建字节数组</span></span><br><span class="line"><span class="string">byte[]b=new byte[1024]；</span></span><br><span class="line"><span class="string">//4.2据读取到字节数组中.</span></span><br><span class="line"><span class="string">int 1en=is.read（b）；</span></span><br><span class="line"><span class="string">//4.3解析数组，打印字符串信息</span></span><br><span class="line"><span class="string">String msg=new String（b，e，1en）；System.out.print1n（msg）；</span></span><br><span class="line"><span class="string">//==ss=sa==sassm==回写数据-as===a=m=#sam=ms=#司===</span></span><br><span class="line"><span class="string">//s.通过socket获取输出流</span></span><br><span class="line"><span class="string">OutputStream out=server.getoutputstream（）；</span></span><br><span class="line"><span class="string">//6.回写数据</span></span><br><span class="line"><span class="string">out.write（“我很好，谢谢你”.getBytes（））；</span></span><br><span class="line"><span class="string">//7.关闭资源.</span></span><br><span class="line"><span class="string">out.close（）；</span></span><br><span class="line"><span class="string">is.close（）；</span></span><br><span class="line"><span class="string">server.close（）；</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTcP</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[]args）<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">System.out.println（“客户端发送数据<span class="string">"）；</span></span><br><span class="line"><span class="string">//1.创建Socket（ip，port），确定连接到哪里，Socket client=new Socket（"</span><span class="number">1</span>ocalhost<span class="string">"，6666）；</span></span><br><span class="line"><span class="string">//2.通过Scoket，获取输出流对象</span></span><br><span class="line"><span class="string">Outputstream os=client.getoutputStream（）；</span></span><br><span class="line"><span class="string">//3.写出数据.</span></span><br><span class="line"><span class="string">os.write（“你好么？tcp，我来了"</span>.getBytes（））；</span><br><span class="line"><span class="comment">//=ssssacasnsans解析回写amwwascanacwsssawsacn的wa部</span></span><br><span class="line"><span class="comment">//4.通过Scoket，获取输入流对象</span></span><br><span class="line">Inputstream in =client.getInputStream（）；</span><br><span class="line"><span class="comment">//5.读取数据数据</span></span><br><span class="line"><span class="keyword">byte</span>[]b=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1</span>ee]；</span><br><span class="line"><span class="keyword">int</span> <span class="number">1</span>en=in.read（b）；</span><br><span class="line">System.out.println（<span class="keyword">new</span> String（b，e，<span class="number">1</span>en））；</span><br><span class="line"><span class="comment">//6.关闭资源，</span></span><br><span class="line">in.close（）；</span><br><span class="line">os.close（）；</span><br><span class="line">client.close（）；</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络编程&quot;&gt;&lt;a href=&quot;#网络编程&quot; class=&quot;headerlink&quot; title=&quot;网络编程&quot;&gt;&lt;/a&gt;网络编程&lt;/h1&gt;&lt;h3 id=&quot;软件结构：&quot;&gt;&lt;a href=&quot;#软件结构：&quot; class=&quot;headerlink&quot; title=&quot;软件结构：&quot;&gt;
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>在windows系统 blog的构建</title>
    <link href="http://yoursite.com/all/%E5%9C%A8windows%E7%B3%BB%E7%BB%9F%20blog%E7%9A%84%E6%9E%84%E5%BB%BA/"/>
    <id>http://yoursite.com/all/在windows系统 blog的构建/</id>
    <published>2019-07-27T10:47:42.000Z</published>
    <updated>2019-07-30T02:26:45.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在windows系统-blog的构建"><a href="#在windows系统-blog的构建" class="headerlink" title="在windows系统 blog的构建"></a>在windows系统 blog的构建</h1><h2 id="1-下载的工具"><a href="#1-下载的工具" class="headerlink" title="1.下载的工具"></a>1.下载的工具</h2><p>  nodejs 、github一直默认就好。（安装时可以安装到其他盘中）</p><h2 id="2-安装git和nodejs"><a href="#2-安装git和nodejs" class="headerlink" title="2.安装git和nodejs"></a>2.安装git和nodejs</h2><p>  先安装好git和nodejs后。右键选着git bush。输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>   等出现相应的版本好是表示安装成功。</p><h2 id="3-开始安装hexo。"><a href="#3-开始安装hexo。" class="headerlink" title="3.开始安装hexo。"></a>3.开始安装hexo。</h2><p>​     先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>出现相应的版本号即为成功。</p><p>接着初始化hexo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>   打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。使用ctrl+c可以把服务关掉。</p><h2 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4.GitHub创建个人仓库"></a>4.GitHub创建个人仓库</h2><p> 首先，你先要有一个GitHub账户，去注册一个吧。</p><p> 注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p><p>  创建一个和你用户名相同的仓库，<a href="http://xn--yfr16an19l.github.io" target="_blank" rel="noopener">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href="http://xn--xxxx-4m5f354ev5p.github.io" target="_blank" rel="noopener">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p>  点击create repository</p><h2 id="5-生成ssh添加到Github"><a href="#5-生成ssh添加到Github" class="headerlink" title="5.生成ssh添加到Github"></a>5.生成ssh添加到Github</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">git config --global user.email <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>用上面这个语言检查。</p><p>在输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>然后在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git<span class="meta">@github</span>.com</span><br></pre></td></tr></table></figure><p>验证是否成功。</p><h2 id="6-把hexo部署到GitHub"><a href="#6-把hexo部署到GitHub" class="headerlink" title="6.把hexo部署到GitHub"></a>6.把hexo部署到GitHub</h2><p>  将hexo生成的文章部署到GitHub上，打开站点配置文件<code>_config.yml</code>，翻到最后，修改为YourgithubName就是你的GitHub账户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:<span class="comment">//github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>  这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>  其中 hexo clean清除了你之前生成的东西，也可以不加。<br>         hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>         hexo deploy 部署文章，可以用hexo d缩写</p><p>  当输入hexo d时需 要你输入username和password。</p><h2 id="7-改主题的风格"><a href="#7-改主题的风格" class="headerlink" title="7.改主题的风格"></a>7.改主题的风格</h2><p>  你可以去网站<a href="https://hexo.io/themes/改你博客的主题选着自己喜欢的。" target="_blank" rel="noopener">https://hexo.io/themes/改你博客的主题选着自己喜欢的。</a></p><h2 id="8-改后相关的操作"><a href="#8-改后相关的操作" class="headerlink" title="8.改后相关的操作"></a>8.改后相关的操作</h2><p>  如rss等，以及改相关的主页信息</p><h2 id="9-创建文章"><a href="#9-创建文章" class="headerlink" title="9.创建文章"></a>9.创建文章</h2><p>  输入 hexo new post ‘yourpost’ 创建你自己的文章。创建好后相关文件会在_psot文件夹下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在windows系统-blog的构建&quot;&gt;&lt;a href=&quot;#在windows系统-blog的构建&quot; class=&quot;headerlink&quot; title=&quot;在windows系统 blog的构建&quot;&gt;&lt;/a&gt;在windows系统 blog的构建&lt;/h1&gt;&lt;h2 id=&quot;1
      
    
    </summary>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/all/hello-world/"/>
    <id>http://yoursite.com/all/hello-world/</id>
    <published>2019-07-25T23:58:41.032Z</published>
    <updated>2019-07-25T23:58:41.032Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
